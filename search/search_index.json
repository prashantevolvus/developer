{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Developer Home This is the developer home for Paycorp. We will show you how to integrate to paycorp.io 1 2 3 4 5 6 document $ . subscribe ( function () { // var tables = document . querySelectorAll ( /* */ \"article table\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) }) }) C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Home"},{"location":"#developer-home","text":"This is the developer home for Paycorp. We will show you how to integrate to paycorp.io 1 2 3 4 5 6 document $ . subscribe ( function () { // var tables = document . querySelectorAll ( /* */ \"article table\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) }) }) C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Developer Home"},{"location":"mandate/","text":"Mandate Management An ACH mandate is set up when you or the billing company need to set up a recurring payment. This payment is typically auto-debited from your account with prior authorization. However, you have to complete the ACH mandate registration to set up this recurring auto-debit payment. This is very Important Write important stuff here. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Foo bar","title":"Mandate Management"},{"location":"mandate/#mandate-management","text":"An ACH mandate is set up when you or the billing company need to set up a recurring payment. This payment is typically auto-debited from your account with prior authorization. However, you have to complete the ACH mandate registration to set up this recurring auto-debit payment. This is very Important Write important stuff here. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Foo bar","title":"Mandate Management"},{"location":"API/flux_api_license/","text":"p { margin-top: 0; margin-bottom: 20px; margin-left: 100px; margin-right: 100px; font-family: Roboto, sans-serif; color: #131e27; font-size: 18px; line-height: 26px; font-weight: 400 } h2 { margin-top: 50px; margin-left: 10px; margin-bottom: 50px; font-family: Poppins, sans-serif; color: #222c33; font-size: 45px; line-height: 3.5rem; font-weight: 200; letter-spacing: .5px } FluxPay API License Agreement 1. API and Content Description. Licensee desires to license certain of Fluxpay\u2019s (\u201cFlux\u201d) application programming interfaces and their associated tools and documentation, (\u201cAPIs\u201d), that are designed to permit Licensee to receive data and content (\u201cContent\u201d) from Flux\u2019s proprietary database so that Licensee can create an application or service or enhance an existing application or service (Licensee\u2019s \u201cApplication\u201d). 2. API and Content License. Subject to the terms and conditions of this Agreement, Flux grants Licensee a limited, non-exclusive, non-sublicensable, non-transferable, non-assignable license under Flux\u2019s intellectual property rights during the term of this Agreement (a) to use the APIs to develop, test, and support the Application; (b) to distribute or allow access to Licensee\u2019s integration of the APIs within the Application to end users of the Application; and (c) to display the Content received from the APIs within the Application. Licensee has no right to distribute or allow access to the stand-alone APIs. 3. Developer Documentation. Licensee\u2019s use of the APIs and display of the Content must comply with the technical documentation, usage guidelines call volume limits, and other documentation (\u201cDeveloper Documentation\u201d) maintained at Flux\u2019s developer site. Flux may consent in writing (email acceptable) to increase the call volume limits, in which case such increased limits shall apply unless and until Flux revokes such consent (email acceptable). In the event of any conflict between the Developer Documentation and this Agreement, this Agreement shall control. 4. Restrictions. Except as expressly and unambiguously authorized under this Agreement or by Flux in writing, Licensee shall not (i) Disclose or provide the APIs to any person or entity other than to Licensee\u2019s employees or independent contractors who are individuals, provided (a) such independent contractors enter into an agreement with Licensee at least as protective of Flux\u2019s rights as this Agreement, and (b) Licensee hereby agree to be responsible for, and liable to Flux for, any breaches of such agreements by Licensee\u2019s independent contractors, (ii) use the APIs for any illegal, unauthorized or otherwise improper purposes, or in any manner which would violate this Agreement or the Developer Documentation, or breach any laws or regulations, or violate the rights of third parties; (iii) remove any legal, copyright, trademark or other proprietary rights notices contained in or on materials Licensee receive or access pursuant to this Agreement, including but not limited to, the APIs, the Developer Documentation, and the Content; (iv) charge, directly or indirectly, any incremental fees (including any unique, specific, or premium charges) for access to the Content or Licensee\u2019s integration of the APIs in the Application; (v) advertise the product or services of Flux\u2019s competitors in the Application; (vi) sell, lease, share, transfer, sublicense or fail to protect the confidentiality of any Content obtained through the APIs, directly or indirectly, to any third party, including any data broker, ad network, ad exchange, or other advertising monetization-related party; (vii) use the APIs in a manner that, as determined by Flux in its sole discretion, exceeds reasonable request volume, constitutes excessive or abusive usage, or otherwise fails to comply or is inconsistent with any part of the Developer Documentation; (viii) use the APIs in an Application that competes with products or services offered by Flux; (ix) use the APIs in conjunction with, or combine content from the APIs with, Flux content obtained through scraping or any other means outside the official Flux APIs; (x) interfere with or disrupt Flux services or servers or networks connected to Flux services, or disobey any requirements, procedures, policies or regulations of networks connected to Flux services, or transmit any viruses, worms, defects, Trojan horses, or any items of a destructive nature through your use of the APIs; or (xi) copy adapt, reformat, reverse-engineer, disassemble, decompile, download, translate or otherwise modify the APIs, Content, Flux\u2019s website other content or services, or any of our other services, through automated or other means. This Agreement does not include any right for Licensee to use any trademark, service mark, trade name or any other mark of Flux or any other party or licensor. No rights or licenses are granted except as expressly and unambiguously set forth herein. If Licensee violates any of the foregoing restrictions, Flux shall own all right, title and interest relating to any and all inventions, works of authorship, designs, know-how, ideas and information made or conceived or reduced to practice, in while or in part, using the API. Licensee hereby agrees to make all assignments necessary to accomplish the foregoing ownership. 5. Proprietary Rights. As between the parties, Flux owns all rights, title, and interest in and to the APIs and to all output and executables of the APIs, and, subject to the foregoing, Licensee owns all rights, title, and interest in and to the Application. Except to the limited extent expressly provided in this Agreement, neither party grants, and the other party shall not acquire, any right, title or interest (including, without limitation, any implied license) in or to any property of the first party. All rights not expressly granted herein are deemed withheld. 6. User Agreements. You shall enter into a valid and binding end user license agreement with all users of your Application (the \u201cEULA\u201d) that contain provisions that contain all of the restrictions on the use of the Content as those contained in this Agreement. Additionally such EULA shall contain limitations of liability and warranty disclaimers with respect to the Content consistent with the limitations contained herein. 7. Fees. Licensee shall pay the fees set forth in the service and/or order form or Partnership agreement, or if no such form or agreement is entered into, Licensee shall access Flux\u2019s public APIs at no charge. All fees shall be non-refundable, and payable in US dollars or the Local Currency on the date they come due. Fees will be payable in the manner specified by Flux. If based on Flux invoices, such fees shall be payable within fifteen (15) days from the date on the applicable invoice. Licensee shall also pay all sales, use, value-added and other taxes, tariffs and duties of any type assessed against Flux except for taxes on Flux\u2019s income. Flux may disable API or Platform access in the event of a failure to pay. 8. Support. Licensee agrees to report to Flux any errors or difficulties discovered and the characteristic conditions and symptoms of such errors and difficulties. Flux is in no way obligated to provide Licensee with any error correction or support, but may provide whatever error correction and/or support services Flux may determine in its sole discretion (and anything it provides in connection therewith will be deemed part of the API). 9. Interoperability. Licensee shall endeavor to inform Flux with respect to the interoperability and compatibility of Licensee\u2019s products with Flux\u2019s management systems as contemplated herein, and any issues or problems with respect thereto; Licensee will use its best efforts to achieve full interoperability and compatibility. 10. Confidentiality. The API (including, without limitation, all improvement, derivatives, modifications and the like) constitutes Flux\u2019s confidential information (\u201cConfidential Information\u201d). Licensee hereby agrees (i) to hold the Confidential Information in confidence and to take reasonable precautions to protect such Confidential Information (including, without limitation, all precautions the Licensee employs with respect to its own confidential materials), (ii) not to divulge any Confidential Information to any third person (except consultants, subject to the conditions stated below), (iii) not to use any Confidential Information except for the purposes set forth in this Agreement, and (iv) not to copy or reverse engineer any Confidential Information. Any employee or consultant given access to the Confidential Information must have a legitimate \u201cneed to know\u201d and shall be similarly bound in writing. Licensee acknowledges and agrees that due to the unique nature of the Flux\u2019s Confidential Information, there can be no adequate remedy at law for any breach of its obligations hereunder and therefore, that upon any such breach or any threat thereof, Flux shall be entitled to appropriate equitable relief in addition to whatever remedies it might have at law. 11. Indemnity. Licensee agrees that Flux shall have no liability whatsoever for (i) any use Licensee makes of the API or (ii) Licensee\u2019s Application. Licensee shall indemnify and hold harmless Flux from any and all claims, damages, liabilities, costs and fees (including reasonable attorneys\u2019 fees) arising from (i) or (ii). 12. Warranty Disclaimer. The parties acknowledge that the API, Content and any services are provided \u201cAS IS.\u201d EXCEPT FOR BODILY INJURY, COMPANY AND ITS LICENSORS DISCLAIM ALL WARRANTIES RELATING TO THE API OR ANY SERVICES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTIES AGAINST INFRINGEMENT OF THIRD-PARTY RIGHTS, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. 13. Limitation of Liability. Flux AND ITS LICENSORS SHALL NOT BE RESPONSIBLE OR LIABLE WITH RESPECT TO ANY SUBJECT MATTER OF THIS AGREEMENT OR THE TERMS AND CONDITIONS RELATED THERETO UNDER ANY CONTRACT, NEGLIGENCE, STRICT LIABILITY OR OTHER THEORY (A) FOR LOSS OR INACCURACY OF DATA OR COST OF PROCUREMENT OF SUBSTITUTE GOODS, SERVICES OR TECHNOLOGY, OR (B) FOR ANY INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO LOSS OF REVENUES AND LOSS OF PROFITS OR (C) FOR ANY AMOUNT IN THE AGGREGATE OF THE AMOUNT PAID OR PAYABLE BY LICENSEE UNDER SECTION 7 (PROVIDED THAT, IF NO AMOUNTS HAVE BEEN PAID, SUCH CAP SHALL BE FIVE HUNDRED DOLLARS (US$500.00)). Flux AND ITS LICENSORS SHALL NOT BE RESPONSIBLE FOR ANY MATTER BEYOND ITS REASONABLE CONTROL. 14. Termination. This Agreement shall continue until terminated as set forth in this section or for the term set forth in the applicable services or order form entered into by the parties. Either party may terminate this Agreement at any time. Any termination of this Agreement shall also terminate the licenses granted hereunder. Upon termination of this Agreement for any reason, Licensee shall destroy and remove from all computers, hard drives, networks, and other storage media all copies of Flux\u2019s Confidential Information, and shall so certify to Flux that such actions have occurred. Sections 4, 5 and 10 through 17 (and any accrued rights to payment) shall survive termination of this Agreement. 15. Government Use. If Licensee is part of an agency, department, or other entity of the United States Government (\"Government\"), the use, duplication, reproduction, release, modification, disclosure or transfer of the API are restricted in accordance with the Federal Acquisition Regulations as applied to civilian agencies and the Defense Federal Acquisition Regulation Supplement as applied to military agencies. The API is a \"commercial item,\" \"commercial computer software\" and \"commercial computer software documentation.\" In accordance with such provisions, any use of the API by the Government shall be governed solely by the terms of this Agreement. 16. Export Controls. Licensee shall comply with all export laws and restrictions and regulations of the Department of Commerce, the United States Department of Treasury Office of Foreign Assets Control (\"OFAC\"), or other United States or foreign agency or authority, and Licensee shall not export, or allow the export or re-export of the APIs in violation of any such restrictions, laws or regulations. By downloading or using the APIs, Licensee agrees to the foregoing and represents and warrants that Licensee is not located in, under the control of, or a national or resident of any restricted country. 17. General. This Agreement shall be governed by and construed under the laws of the Courts of India without giving effect to the principles of conflicts of law and without application of the UN Convention on Contracts for the International Sale of Goods. All disputes arising in connection with this Agreement shall be subject to the sole and exclusive jurisdiction and venue of the State of Karnataka, India . The prevailing party in any action arising out of this Agreement shall be entitled to an award of its costs and attorneys\u2019 fees. No waiver of rights under this Agreement by either party shall constitute a subsequent waiver of any right under this Agreement and all waivers must be in writing. In the event that any term of this Agreement is held by a court to be unenforceable, such provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. Licensee may not assign or transfer this Agreement (or any part hereof) without the prior written consent of Flux. Flux shall have the right to freely assign or otherwise transfer this Agreement (in whole or part). All notices required or permitted under this Agreement will be in writing and will be sent (i) if to Flux: fluxapi@evolvussolutions.com and if Licensee: such email address as Licensee provides to Flux on registering for the API(or, in either case, such other address as a party may designate in writing). This Agreement is the complete agreement between the parties hereto concerning the subject matter of this Agreement and replaces any prior oral or written communications between the parties with respect thereto. This Agreement may only be modified by a written document executed by the parties hereto. If you have any questions, please contact Flux at fluxapi@evolvussolutions.com","title":"Flux api license"},{"location":"API/flux_api_terms_of_service/","text":"p { margin-top: 0; margin-bottom: 20px; margin-left: 100px; margin-right: 100px; font-family: Roboto, sans-serif; color: #131e27; font-size: 18px; line-height: 26px; font-weight: 400 } h2 { margin-top: 50px; margin-left: 10px; margin-bottom: 50px; font-family: Poppins, sans-serif; color: #222c33; font-size: 45px; line-height: 3.5rem; font-weight: 200; letter-spacing: .5px } FluxPay API Terms of Service Work in Progress If you have any questions, please contact Flux at fluxapi@evolvussolutions.com","title":"Flux api terms of service"},{"location":"installation/","text":"Smart Mandate Release Status smart-mandate Description Mandate solutions for Paycorp.io Steps to give release : 1) git clone https://github.com/paycorp-io/smart-mandate.git PAYCORP-RELEASE 2) cd PAYCORP-RELEASE Delete the existing release branch to avoid conflicts To delete the branch \u2192 git branch -d release \u2192 locally To delete the branch remotely \u2192 git push origin --delete release \u2192 remotely 3) git checkout -b release 4) git push origin release 5) cd smart-mandate 6) mvn clean install 7) mvn external.atlassian.jgitflow:jgitflow-maven-plugin:release-start -DautoVersionSubmodules=true -Dmaven.javadoc.skip=true 8) mvn external.atlassian.jgitflow:jgitflow-maven-plugin:release-finish -DautoVersionSubmodules=true -Dmaven.javadoc.skip=true 9) cd .. 10) git push origin release 11) git push origin master 12) git push --tags To push Release to Nexus 13)if you are in release branch do git checkout release 14)mvn deploy","title":"Cloud"},{"location":"installation/#smart-mandate","text":"","title":"Smart Mandate"},{"location":"installation/#release-status","text":"","title":"Release Status"},{"location":"installation/#smart-mandate-description","text":"Mandate solutions for Paycorp.io","title":"smart-mandate Description"},{"location":"installation/#steps-to-give-release","text":"1) git clone https://github.com/paycorp-io/smart-mandate.git PAYCORP-RELEASE 2) cd PAYCORP-RELEASE Delete the existing release branch to avoid conflicts To delete the branch \u2192 git branch -d release \u2192 locally To delete the branch remotely \u2192 git push origin --delete release \u2192 remotely 3) git checkout -b release 4) git push origin release 5) cd smart-mandate 6) mvn clean install 7) mvn external.atlassian.jgitflow:jgitflow-maven-plugin:release-start -DautoVersionSubmodules=true -Dmaven.javadoc.skip=true 8) mvn external.atlassian.jgitflow:jgitflow-maven-plugin:release-finish -DautoVersionSubmodules=true -Dmaven.javadoc.skip=true 9) cd .. 10) git push origin release 11) git push origin master 12) git push --tags To push Release to Nexus 13)if you are in release branch do git checkout release 14)mvn deploy","title":"Steps to give release :"},{"location":"installation/bankinstallation/","text":"Bank Installation","title":"Bank"},{"location":"installation/bankinstallation/#bank-installation","text":"","title":"Bank Installation"},{"location":"support/","text":"Support Page for Paycorp Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Main"},{"location":"support/#support-page-for-paycorp","text":"Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Support Page for Paycorp"},{"location":"support/Error/","text":"AWR Report for DB: SYSTEM, Inst: mms, Snaps: 50951-50952 body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;} pre.awr {font:8pt Courier;color:black; background:White;} h1.awr {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;} h2.awr {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;} h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;} li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;} th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px} th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px} td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;} td.awrc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;} td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;} td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;} td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;} td.awrcrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;} td.awrclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;} td.awrcbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;} a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;} td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;} td.awrct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;} td.awrnclbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;} td.awrncbbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;} td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;} td.awrcrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;} td.awrclbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;} td.awrcbbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;} table.tdiff { border_collapse: collapse; } .hidden {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;} .pad {margin-left:17px;} .doublepad {margin-left:34px;} WORKLOAD REPOSITORY report for DB Name DB Id Instance Inst num Startup Time Release RAC SYSTEM 4060618396 mms 1 29-Feb-20 17:02 11.2.0.3.0 NO Host Name Platform CPUs Cores Sockets Memory (GB) MMSUATDBB01053 Microsoft Windows x86 64-bit 4 4 2 32.00 Snap Id Snap Time Sessions Cursors/Session Begin Snap: 50951 28-Jun-20 06:30:14 163 1.3 End Snap: 50952 28-Jun-20 07:30:21 184 1.1 Elapsed: 60.13 (mins) DB Time: 68.25 (mins) Report Summary Cache Sizes Begin End Buffer Cache: 1,232M 1,232M Std Block Size: 8K Shared Pool Size: 1,776M 1,776M Log Buffer: 14,532K Load Profile Per Second Per Transaction Per Exec Per Call DB Time(s): 1.1 10.4 0.12 0.25 DB CPU(s): 0.5 4.3 0.05 0.10 Redo size: 17,879.2 163,293.7 Logical reads: 50,114.0 457,699.8 Block changes: 146.3 1,335.8 Physical reads: 145.9 1,332.9 Physical writes: 66.7 609.2 User calls: 4.6 42.1 Parses: 7.1 65.0 Hard parses: 0.0 0.4 W/A MB processed: 0.0 0.2 Logons: 0.8 7.5 Executes: 9.5 87.2 Rollbacks: 0.0 0.0 Transactions: 0.1 Instance Efficiency Percentages (Target 100%) Buffer Nowait %: 100.00 Redo NoWait %: 100.00 Buffer Hit %: 99.84 In-memory Sort %: 100.00 Library Hit %: 99.42 Soft Parse %: 99.42 Execute to Parse %: 25.46 Latch Hit %: 100.00 Parse CPU to Parse Elapsd %: 61.49 % Non-Parse CPU: 99.94 Shared Pool Statistics Begin End Memory Usage %: 86.02 86.12 % SQL with executions>1: 68.05 95.60 % Memory for SQL w/exec>1: 52.18 83.67 Top 5 Timed Foreground Events Event Waits Time(s) Avg wait (ms) % DB time Wait Class DB CPU 1,683 41.10 direct path read 232,344 134 1 3.28 User I/O db file sequential read 118,533 113 1 2.76 User I/O db file scattered read 54,296 65 1 1.59 User I/O direct path write 54,350 17 0 0.41 User I/O Host CPU (CPUs: 4 Cores: 4 Sockets: 2) Load Average Begin Load Average End %User %System %WIO %Idle 12.3 0.7 87.0 Instance CPU %Total CPU %Busy CPU %DB time waiting for CPU (Resource Manager) 11.8 90.1 0.0 Memory Statistics Begin End Host Mem (MB): 32,767.6 32,767.6 SGA use (MB): 3,072.0 3,072.0 PGA use (MB): 433.1 415.5 % Host Mem used for SGA+PGA: 10.70 10.64 Main Report Report Summary Wait Events Statistics SQL Statistics Instance Activity Statistics IO Stats Buffer Pool Statistics Advisory Statistics Wait Statistics Undo Statistics Latch Statistics Segment Statistics Dictionary Cache Statistics Library Cache Statistics Memory Statistics Streams Statistics Resource Limit Statistics Shared Server Statistics init.ora Parameters Back to Top Wait Events Statistics Time Model Statistics Operating System Statistics Operating System Statistics - Detail Foreground Wait Class Foreground Wait Events Background Wait Events Wait Event Histogram Wait Event Histogram Detail (64 msec to 2 sec) Wait Event Histogram Detail (4 sec to 2 min) Wait Event Histogram Detail (4 min to 1 hr) Service Statistics Service Wait Class Stats Back to Top Time Model Statistics Total time in database user-calls (DB Time): 4095.3s Statistics including the word \"background\" measure background process time, and so do not contribute to the DB time statistic Ordered by % or DB time desc, Statistic name Statistic Name Time (s) % of DB Time sql execute elapsed time 1,973.96 48.20 DB CPU 1,683.31 41.10 PL/SQL execution elapsed time 12.37 0.30 connection management call elapsed time 9.94 0.24 parse time elapsed 2.30 0.06 hard parse elapsed time 1.01 0.02 failed parse elapsed time 0.54 0.01 hard parse (sharing criteria) elapsed time 0.03 0.00 repeated bind elapsed time 0.01 0.00 sequence load elapsed time 0.00 0.00 hard parse (bind mismatch) elapsed time 0.00 0.00 PL/SQL compilation elapsed time 0.00 0.00 DB time 4,095.28 background elapsed time 236.05 background cpu time 5.77 Back to Wait Events Statistics Back to Top Operating System Statistics *TIME statistic values are diffed. All others display actual values. End Value is displayed if different ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name Statistic Value End Value AVG_BUSY_TIME 46,723 AVG_IDLE_TIME 312,135 AVG_SYS_TIME 2,514 AVG_USER_TIME 44,068 BUSY_TIME 187,409 IDLE_TIME 1,249,073 SYS_TIME 10,592 USER_TIME 176,850 RSRC_MGR_CPU_WAIT_TIME 0 PHYSICAL_MEMORY_BYTES 34,359,267,328 NUM_CPUS 4 NUM_CPU_CORES 4 NUM_CPU_SOCKETS 2 Back to Wait Events Statistics Back to Top Operating System Statistics - Detail Snap Time Load %busy %user %sys %idle %iowait 28-Jun 06:30:14 0.00 28-Jun 07:30:21 0.00 13.05 12.31 0.74 86.95 0.00 Back to Wait Events Statistics Back to Top Foreground Wait Class s - second, ms - millisecond - 1000th of a second ordered by wait time desc, waits desc %Timeouts: value of 0 indicates value was < .5%. Value of null is truly 0 Captured Time accounts for 49.2% of Total DB time 4,095.28 (s) Total FG Wait Time: 332.14 (s) DB CPU time: 1,683.31 (s) Wait Class Waits %Time -outs Total Wait Time (s) Avg wait (ms) %DB time DB CPU 1,683 41.10 User I/O 459,665 0 330 1 8.05 Commit 2,874 0 2 1 0.04 Network 10,185 0 0 0 0.01 System I/O 56 0 0 1 0.00 Configuration 2 0 0 22 0.00 Concurrency 27 0 0 1 0.00 Application 10 0 0 2 0.00 Other 33 0 0 0 0.00 Back to Wait Events Statistics Back to Top Foreground Wait Events s - second, ms - millisecond - 1000th of a second Only events with Total Wait Time (s) >= .001 are shown ordered by wait time desc, waits desc (idle events last) %Timeouts: value of 0 indicates value was < .5%. Value of null is truly 0 Event Waits %Time -outs Total Wait Time (s) Avg wait (ms) Waits /txn % DB time direct path read 232,344 0 134 1 588.21 3.28 db file sequential read 118,533 0 113 1 300.08 2.76 db file scattered read 54,296 0 65 1 137.46 1.59 direct path write 54,350 0 17 0 137.59 0.41 log file sync 2,874 0 2 1 7.28 0.04 Disk file operations I/O 142 0 1 6 0.36 0.02 SQL*Net more data from client 150 0 0 3 0.38 0.01 SQL*Net message to client 9,885 0 0 0 25.03 0.00 control file sequential read 56 0 0 1 0.14 0.00 log file switch (checkpoint incomplete) 2 0 0 22 0.01 0.00 enq: RO - fast object reuse 10 0 0 2 0.03 0.00 buffer busy waits 6 0 0 3 0.02 0.00 library cache: mutex X 15 0 0 1 0.04 0.00 enq: CR - block range reuse ckpt 10 0 0 1 0.03 0.00 SQL*Net more data to client 150 0 0 0 0.38 0.00 reliable message 20 0 0 0 0.05 0.00 SQL*Net message from client 9,860 0 499,751 50685 24.96 jobq slave wait 7,643 100 3,873 507 19.35 Back to Wait Events Statistics Back to Top Background Wait Events ordered by wait time desc, waits desc (idle events last) Only events with Total Wait Time (s) >= .001 are shown %Timeouts: value of 0 indicates value was < .5%. Value of null is truly 0 Event Waits %Time -outs Total Wait Time (s) Avg wait (ms) Waits /txn % bg time control file sequential read 3,097 0 5 2 7.84 2.21 db file sequential read 2,540 0 4 2 6.43 1.82 log file parallel write 6,355 0 4 1 16.09 1.53 os thread startup 147 0 1 7 0.37 0.45 control file parallel write 1,375 0 1 1 3.48 0.38 Disk file operations I/O 345 0 1 2 0.87 0.36 SQL*Net more data from client 2,493 0 1 0 6.31 0.25 db file parallel write 1,102 0 0 0 2.79 0.19 SQL*Net more data to client 2,493 0 0 0 6.31 0.09 direct path read 23 0 0 9 0.06 0.09 db file async I/O submit 948 0 0 0 2.40 0.03 ADR block file read 15 0 0 4 0.04 0.02 db file scattered read 6 0 0 3 0.02 0.01 log file sequential read 4 0 0 4 0.01 0.01 SQL*Net message to client 8,174 0 0 0 20.69 0.00 asynch descriptor resize 2,880 100 0 0 7.29 0.00 direct path write 9 0 0 0 0.02 0.00 ADR block file write 5 0 0 1 0.01 0.00 ADR file lock 6 0 0 0 0.02 0.00 log file sync 3 0 0 1 0.01 0.00 log file single write 4 0 0 0 0.01 0.00 reliable message 14 0 0 0 0.04 0.00 rdbms ipc message 24,334 73 42,908 1763 61.61 DIAG idle wait 7,144 100 7,183 1005 18.09 Space Manager: slave idle wait 1,286 97 6,324 4917 3.26 smon timer 17 65 3,607 212195 0.04 pmon timer 1,197 100 3,594 3002 3.03 Streams AQ: qmn slave idle wait 128 0 3,586 28015 0.32 Streams AQ: qmn coordinator idle wait 256 50 3,586 14007 0.65 SQL*Net message from client 10,907 0 227 21 27.61 class slave wait 21 0 0 0 0.05 Back to Wait Events Statistics Back to Top Wait Event Histogram Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 % of Waits: value of .0 indicates value was <.05%; value of null is truly 0 % of Waits: column heading of <=1s is truly <1024ms, >1s is truly >=1024ms Ordered by Event (idle events last) % of Waits Event Total Waits <1ms <2ms <4ms <8ms <16ms <32ms <=1s >1s ADR block file read 15 60.0 13.3 6.7 13.3 6.7 ADR block file write 5 100.0 ADR file lock 6 83.3 16.7 Disk file operations I/O 487 76.2 7.8 .8 7.4 6.8 1.0 LGWR wait for redo copy 26 100.0 SQL*Net message to client 18K 100.0 SQL*Net more data from client 2641 99.8 .0 .1 SQL*Net more data to client 2641 100.0 asynch descriptor resize 2878 100.0 buffer busy waits 6 83.3 16.7 control file parallel write 1369 98.1 1.8 .1 control file sequential read 3139 80.6 5.9 2.0 5.6 5.3 .5 .1 db file async I/O submit 948 99.8 .2 db file parallel write 1102 98.0 1.5 .4 .1 db file scattered read 54.2K 86.9 5.9 1.1 2.5 3.1 .4 .0 db file sequential read 117.1K 90.2 4.6 .7 2.1 2.1 .3 .0 direct path read 226.2K 94.7 3.4 .6 .6 .6 .1 .0 direct path write 53.1K 99.8 .2 .0 enq: CR - block range reuse ckpt 10 100.0 enq: RO - fast object reuse 10 50.0 10.0 20.0 20.0 latch free 4 100.0 latch: call allocation 29 100.0 latch: messages 2 100.0 latch: object queue header operation 1 100.0 latch: row cache objects 1 100.0 latch: shared pool 7 100.0 library cache: mutex X 16 87.5 6.3 6.3 log file parallel write 6350 97.3 1.9 .8 .0 log file sequential read 4 75.0 25.0 log file single write 4 100.0 log file switch (checkpoint incomplete) 2 50.0 50.0 log file sync 2874 96.1 3.4 .4 .0 os thread startup 147 86.4 11.6 .7 1.4 reliable message 34 100.0 DIAG idle wait 7135 100.0 SQL*Net message from client 20.8K 83.1 3.7 13.2 Space Manager: slave idle wait 1279 .1 .9 99.0 Streams AQ: qmn coordinator idle wait 256 50.0 50.0 Streams AQ: qmn slave idle wait 128 100.0 class slave wait 21 100.0 jobq slave wait 7603 .0 100.0 pmon timer 1196 .1 99.9 rdbms ipc message 24.3K 2.2 .3 .3 .8 3.3 2.5 48.9 41.7 smon timer 17 11.8 88.2 Back to Wait Events Statistics Back to Top Wait Event Histogram Detail (64 msec to 2 sec) Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 Units for % of Total Waits: ms is milliseconds s is 1024 milliseconds (approximately 1 second) % of Total Waits: total waits for all wait classes, including Idle % of Total Waits: value of .0 indicates value was <.05%; value of null is truly 0 Ordered by Event (only non-idle events are displayed) % of Total Waits Event Waits 64ms to 2s <32ms <64ms <1/8s <1/4s <1/2s <1s <2s >=2s Disk file operations I/O 5 99.0 1.0 SQL*Net more data from client 3 99.9 .1 .0 control file sequential read 3 99.9 .1 .0 db file scattered read 24 100.0 .0 .0 db file sequential read 38 100.0 .0 .0 direct path read 28 100.0 .0 .0 os thread startup 2 98.6 1.4 Back to Wait Events Statistics Back to Top Wait Event Histogram Detail (4 sec to 2 min) No data exists for this section of the report. Back to Wait Events Statistics Back to Top Wait Event Histogram Detail (4 min to 1 hr) No data exists for this section of the report. Back to Wait Events Statistics Back to Top Service Statistics ordered by DB Time Service Name DB Time (s) DB CPU (s) Physical Reads (K) Logical Reads (K) SYS$USERS 4,103 1,687 525 180,773 SYS$BACKGROUND 0 0 3 63 system 0 0 0 0 Back to Wait Events Statistics Back to Top Service Wait Class Stats Wait Class info for services in the Service Statistics section. Total Waits and Time Waited displayed for the following wait classes: User I/O, Concurrency, Administrative, Network Time Waited (Wt Time) in seconds Service Name User I/O Total Wts User I/O Wt Time Concurcy Total Wts Concurcy Wt Time Admin Total Wts Admin Wt Time Network Total Wts Network Wt Time SYS$USERS 459779 330 27 0 0 0 10185 0 SYS$BACKGROUND 2927 5 148 1 0 0 0 0 Back to Wait Events Statistics Back to Top SQL Statistics SQL ordered by Elapsed Time SQL ordered by CPU Time SQL ordered by User I/O Wait Time SQL ordered by Gets SQL ordered by Reads SQL ordered by Physical Reads (UnOptimized) SQL ordered by Executions SQL ordered by Parse Calls SQL ordered by Sharable Memory SQL ordered by Version Count Complete List of SQL Text Back to Top SQL ordered by Elapsed Time Resources reported for PL/SQL code includes the resources used by all SQL statements called by the code. % Total DB Time is the Elapsed Time of the SQL statement divided into the Total Database Time multiplied by 100 %Total - Elapsed Time as a percentage of Total DB time %CPU - CPU Time as a percentage of Elapsed Time %IO - User I/O Time as a percentage of Elapsed Time Captured SQL account for 48.1% of Total DB Time (s): 4,095 Captured PL/SQL account for 48.0% of Total DB Time (s): 4,095 Elapsed Time (s) Executions Elapsed Time per Exec (s) %Total %CPU %IO SQL Id SQL Module SQL Text 1,770.55 1 1,770.55 43.23 91.00 9.16 5zruc4v6y32f9 DBMS_SCHEDULER DECLARE job BINARY_INTEGER := ... 1,192.27 11 108.39 29.11 99.97 0.00 fs436064p5sw3 DBMS_SCHEDULER /* SQL Analyze(421, 1) */ /* S... 577.61 2 288.80 14.10 72.48 28.07 g7xwbdngv8f1z DBMS_SCHEDULER /* SQL Analyze(421, 1) */ /* S... 192.84 1 192.84 4.71 18.00 82.73 6mcpb06rctk0x DBMS_SCHEDULER call dbms_space.auto_space_adv... 179.50 1 179.50 4.38 18.85 81.89 9jcq4ds92q5f5 DBMS_SCHEDULER create table \"FLUXMMS\".DBMS_TA... 11.51 1 11.51 0.28 1.36 99.32 8untjv9m3brr3 DBMS_SCHEDULER SELECT U.SPACE_USED, U.SPACE_A... 1.66 60 0.03 0.04 39.47 19.98 6gvch1xu9ca3g DECLARE job BINARY_INTEGER := ... 1.22 2,701 0.00 0.03 42.35 27.14 f711myt0q6cma JDBC Thin Client insert into sys.aud$( sessioni... 1.08 2,728 0.00 0.03 34.81 32.58 4vs91dcv7u1p6 JDBC Thin Client insert into sys.aud$( sessioni... 1.08 8,318 0.00 0.03 55.12 0.00 cm5vu20fhtnq1 select /*+ connect_by_filterin... Back to SQL Statistics Back to Top SQL ordered by CPU Time Resources reported for PL/SQL code includes the resources used by all SQL statements called by the code. %Total - CPU Time as a percentage of Total DB CPU %CPU - CPU Time as a percentage of Elapsed Time %IO - User I/O Time as a percentage of Elapsed Time Captured SQL account for 97.9% of Total CPU Time (s): 1,683 Captured PL/SQL account for 97.8% of Total CPU Time (s): 1,683 CPU Time (s) Executions CPU per Exec (s) %Total Elapsed Time (s) %CPU %IO SQL Id SQL Module SQL Text 1,611.17 1 1,611.17 95.71 1,770.55 91.00 9.16 5zruc4v6y32f9 DBMS_SCHEDULER DECLARE job BINARY_INTEGER := ... 1,191.92 11 108.36 70.81 1,192.27 99.97 0.00 fs436064p5sw3 DBMS_SCHEDULER /* SQL Analyze(421, 1) */ /* S... 418.64 2 209.32 24.87 577.61 72.48 28.07 g7xwbdngv8f1z DBMS_SCHEDULER /* SQL Analyze(421, 1) */ /* S... 34.72 1 34.72 2.06 192.84 18.00 82.73 6mcpb06rctk0x DBMS_SCHEDULER call dbms_space.auto_space_adv... 33.84 1 33.84 2.01 179.50 18.85 81.89 9jcq4ds92q5f5 DBMS_SCHEDULER create table \"FLUXMMS\".DBMS_TA... 0.66 60 0.01 0.04 1.66 39.47 19.98 6gvch1xu9ca3g DECLARE job BINARY_INTEGER := ... 0.59 8,318 0.00 0.04 1.08 55.12 0.00 cm5vu20fhtnq1 select /*+ connect_by_filterin... 0.52 2,701 0.00 0.03 1.22 42.35 27.14 f711myt0q6cma JDBC Thin Client insert into sys.aud$( sessioni... 0.38 2,728 0.00 0.02 1.08 34.81 32.58 4vs91dcv7u1p6 JDBC Thin Client insert into sys.aud$( sessioni... 0.34 2,794 0.00 0.02 0.66 52.35 0.00 0k8522rmdzg4k select privilege# from sysauth... Back to SQL Statistics Back to Top SQL ordered by User I/O Wait Time Resources reported for PL/SQL code includes the resources used by all SQL statements called by the code. %Total - User I/O Time as a percentage of Total User I/O Wait time %CPU - CPU Time as a percentage of Elapsed Time %IO - User I/O Time as a percentage of Elapsed Time Captured SQL account for 96.7% of Total User I/O Wait Time (s): 335 Captured PL/SQL account for 96.3% of Total User I/O Wait Time (s): 335 User I/O Time (s) Executions UIO per Exec (s) %Total Elapsed Time (s) %CPU %IO SQL Id SQL Module SQL Text 162.12 1 162.12 48.38 1,770.55 91.00 9.16 5zruc4v6y32f9 DBMS_SCHEDULER DECLARE job BINARY_INTEGER := ... 162.11 2 81.06 48.38 577.61 72.48 28.07 g7xwbdngv8f1z DBMS_SCHEDULER /* SQL Analyze(421, 1) */ /* S... 159.54 1 159.54 47.61 192.84 18.00 82.73 6mcpb06rctk0x DBMS_SCHEDULER call dbms_space.auto_space_adv... 147.00 1 147.00 43.87 179.50 18.85 81.89 9jcq4ds92q5f5 DBMS_SCHEDULER create table \"FLUXMMS\".DBMS_TA... 11.43 1 11.43 3.41 11.51 1.36 99.32 8untjv9m3brr3 DBMS_SCHEDULER SELECT U.SPACE_USED, U.SPACE_A... 0.99 1 0.99 0.29 1.01 3.08 97.33 bursc6qqb9r40 DBMS_SCHEDULER select count(*) cnt from \"FLUX... 0.42 1 0.42 0.13 0.43 3.63 98.47 djp8c1d3gfwpc SELECT /* OPT_DYN_SAMP */ /*+ ... 0.41 1 0.41 0.12 0.75 0.00 54.91 6ajkhukk78nsr begin prvt_hdm.auto_execute( :... 0.40 1 0.40 0.12 0.40 3.87 97.94 350myuyx0t1d6 insert into wrh$_tablespace_st... 0.35 2,728 0.00 0.10 1.08 34.81 32.58 4vs91dcv7u1p6 JDBC Thin Client insert into sys.aud$( sessioni... Back to SQL Statistics Back to Top SQL ordered by Gets Resources reported for PL/SQL code includes the resources used by all SQL statements called by the code. %Total - Buffer Gets as a percentage of Total Buffer Gets %CPU - CPU Time as a percentage of Elapsed Time %IO - User I/O Time as a percentage of Elapsed Time Total Buffer Gets: 180,791,407 Captured SQL account for 99.8% of Total Buffer Gets Executions Gets per Exec %Total Elapsed Time (s) %CPU %IO SQL Id SQL Module SQL Text 179,469,333 1 179,469,333.00 99.27 1,770.55 91 9.2 5zruc4v6y32f9 DBMS_SCHEDULER DECLARE job BINARY_INTEGER := ... 133,441,275 11 12,131,025.00 73.81 1,192.27 100 0 fs436064p5sw3 DBMS_SCHEDULER /* SQL Analyze(421, 1) */ /* S... 46,021,748 2 23,010,874.00 25.46 577.61 72.5 28.1 g7xwbdngv8f1z DBMS_SCHEDULER /* SQL Analyze(421, 1) */ /* S... 926,745 1 926,745.00 0.51 192.84 18 82.7 6mcpb06rctk0x DBMS_SCHEDULER call dbms_space.auto_space_adv... 914,722 1 914,722.00 0.51 179.50 18.9 81.9 9jcq4ds92q5f5 DBMS_SCHEDULER create table \"FLUXMMS\".DBMS_TA... 50,802 8,318 6.11 0.03 1.08 55.1 0 cm5vu20fhtnq1 select /*+ connect_by_filterin... 33,109 60 551.82 0.02 1.66 39.5 20 6gvch1xu9ca3g DECLARE job BINARY_INTEGER := ... 19,824 2,794 7.10 0.01 0.66 52.4 0 0k8522rmdzg4k select privilege# from sysauth... 8,990 1 8,990.00 0.00 0.75 0 54.9 6ajkhukk78nsr begin prvt_hdm.auto_execute( :... 8,639 2,728 3.17 0.00 1.08 34.8 32.6 4vs91dcv7u1p6 JDBC Thin Client insert into sys.aud$( sessioni... Back to SQL Statistics Back to Top SQL ordered by Reads %Total - Physical Reads as a percentage of Total Disk Reads %CPU - CPU Time as a percentage of Elapsed Time %IO - User I/O Time as a percentage of Elapsed Time Total Disk Reads: 526,476 Captured SQL account for 98.0% of Total Physical Reads Executions Reads per Exec %Total Elapsed Time (s) %CPU %IO SQL Id SQL Module SQL Text 286,082 1 286,082.00 54.34 1,770.55 91.00 9.16 5zruc4v6y32f9 DBMS_SCHEDULER DECLARE job BINARY_INTEGER := ... 286,080 2 143,040.00 54.34 577.61 72.48 28.07 g7xwbdngv8f1z DBMS_SCHEDULER /* SQL Analyze(421, 1) */ /* S... 229,598 1 229,598.00 43.61 192.84 18.00 82.73 6mcpb06rctk0x DBMS_SCHEDULER call dbms_space.auto_space_adv... 225,699 1 225,699.00 42.87 179.50 18.85 81.89 9jcq4ds92q5f5 DBMS_SCHEDULER create table \"FLUXMMS\".DBMS_TA... 1,983 1 1,983.00 0.38 1.01 3.08 97.33 bursc6qqb9r40 DBMS_SCHEDULER select count(*) cnt from \"FLUX... 1,905 1 1,905.00 0.36 11.51 1.36 99.32 8untjv9m3brr3 DBMS_SCHEDULER SELECT U.SPACE_USED, U.SPACE_A... 393 1 393.00 0.07 0.43 3.63 98.47 djp8c1d3gfwpc SELECT /* OPT_DYN_SAMP */ /*+ ... 69 1 69.00 0.01 0.75 0.00 54.91 6ajkhukk78nsr begin prvt_hdm.auto_execute( :... 63 60 1.05 0.01 1.66 39.47 19.98 6gvch1xu9ca3g DECLARE job BINARY_INTEGER := ... 62 55 1.13 0.01 0.32 48.36 46.23 3am9cfkvx7gq1 CALL MGMT_ADMIN_DATA.EVALUATE_... Back to SQL Statistics Back to Top SQL ordered by Physical Reads (UnOptimized) UnOptimized Read Reqs = Physical Read Reqts - Optimized Read Reqs %Opt - Optimized Reads as percentage of SQL Read Requests %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs Total Physical Read Requests: 407,127 Captured SQL account for 97.4% of Total Total UnOptimized Read Requests: 407,127 Captured SQL account for 97.4% of Total Total Optimized Read Requests: 1 Captured SQL account for 0.0% of Total UnOptimized Read Reqs Physical Read Reqs Executions UnOptimized Reqs per Exec %Opt %Total SQL Id SQL Module SQL Text 227,772 227,772 1 227,772.00 0.00 55.95 6mcpb06rctk0x DBMS_SCHEDULER call dbms_space.auto_space_adv... 225,699 225,699 1 225,699.00 0.00 55.44 9jcq4ds92q5f5 DBMS_SCHEDULER create table \"FLUXMMS\".DBMS_TA... 168,770 168,770 1 168,770.00 0.00 41.45 5zruc4v6y32f9 DBMS_SCHEDULER DECLARE job BINARY_INTEGER := ... 168,726 168,726 2 84,363.00 0.00 41.44 g7xwbdngv8f1z DBMS_SCHEDULER /* SQL Analyze(421, 1) */ /* S... 1,905 1,905 1 1,905.00 0.00 0.47 8untjv9m3brr3 DBMS_SCHEDULER SELECT U.SPACE_USED, U.SPACE_A... 157 157 1 157.00 0.00 0.04 bursc6qqb9r40 DBMS_SCHEDULER select count(*) cnt from \"FLUX... 77 77 60 1.28 0.00 0.02 6gvch1xu9ca3g DECLARE job BINARY_INTEGER := ... 76 76 55 1.38 0.00 0.02 3am9cfkvx7gq1 CALL MGMT_ADMIN_DATA.EVALUATE_... 64 64 1 64.00 0.00 0.02 djp8c1d3gfwpc SELECT /* OPT_DYN_SAMP */ /*+ ... 63 63 1 63.00 0.00 0.02 6ajkhukk78nsr begin prvt_hdm.auto_execute( :... Back to SQL Statistics Back to Top SQL ordered by Executions %CPU - CPU Time as a percentage of Elapsed Time %IO - User I/O Time as a percentage of Elapsed Time Total Executions: 34,424 Captured SQL account for 82.9% of Total Executions Rows Processed Rows per Exec Elapsed Time (s) %CPU %IO SQL Id SQL Module SQL Text 8,318 34,581 4.16 1.08 55.1 0 cm5vu20fhtnq1 select /*+ connect_by_filterin... 2,794 8,648 3.10 0.66 52.4 0 0k8522rmdzg4k select privilege# from sysauth... 2,728 2,728 1.00 0.68 39.3 0 0ws7ahf1d78qa select SYS_CONTEXT('USERENV', ... 2,728 2,728 1.00 0.34 27.7 0 459f3z9u4fb3u select value$ from props$ wher... 2,728 2,728 1.00 1.08 34.8 32.6 4vs91dcv7u1p6 JDBC Thin Client insert into sys.aud$( sessioni... 2,728 2,728 1.00 0.23 40.8 0 5ur69atw3vfhj select decode(failover_method,... 2,701 2,701 1.00 1.22 42.3 27.1 f711myt0q6cma JDBC Thin Client insert into sys.aud$( sessioni... 717 66 0.09 0.11 0 0 5ms6rbzdnq16t select job, nvl2(last_date, 1,... 364 364 1.00 0.01 0 0 089dbukv1aanh EM_PING SELECT SYS_EXTRACT_UTC(SYSTIME... 242 242 1.00 0.01 276.7 0 gfdn12rn0fg3m SELECT TARGET_GUID FROM MGMT_T... Back to SQL Statistics Back to Top SQL ordered by Parse Calls Total Parse Calls: 25,660 Captured SQL account for 80.7% of Total Parse Calls Executions % Total Parses SQL Id SQL Module SQL Text 2,794 8,318 10.89 cm5vu20fhtnq1 select /*+ connect_by_filterin... 2,793 2,794 10.88 0k8522rmdzg4k select privilege# from sysauth... 2,728 2,728 10.63 0ws7ahf1d78qa select SYS_CONTEXT('USERENV', ... 2,728 2,728 10.63 459f3z9u4fb3u select value$ from props$ wher... 2,728 2,728 10.63 4vs91dcv7u1p6 JDBC Thin Client insert into sys.aud$( sessioni... 2,728 2,728 10.63 5ur69atw3vfhj select decode(failover_method,... 2,701 2,701 10.53 f711myt0q6cma JDBC Thin Client insert into sys.aud$( sessioni... 156 156 0.61 bb926a5dcb8kr merge into sys.mon_mods$ m usi... 66 66 0.26 47a50dvdgnxc2 update sys.job$ set failures=0... 66 66 0.26 aq8yqxyyb40nn update sys.job$ set this_date=... Back to SQL Statistics Back to Top SQL ordered by Sharable Memory Only Statements with Sharable Memory greater than 1048576 are displayed Sharable Mem (b) Executions % Total SQL Id SQL Module SQL Text 11,707,866 3 0.63 9dhn1b8d88dpf select OBJOID, CLSOID, RUNTIME... 8,904,936 12 0.48 bn4b3vjw2mj3u SELECT OBJOID, CLSOID, DECODE(... 8,819,616 1 0.47 317v5hnvvd49h UPDATE wrh$_seg_stat_obj ob S... 7,602,602 1 0.41 6wm3n4d7bnddg SELECT source, (case when tim... 7,283,799 156 0.39 bb926a5dcb8kr merge into sys.mon_mods$ m usi... 5,541,653 1 0.30 9n8xc314xdm0t insert into wrh$_shared_server... 4,838,206 3 0.26 a5mmhrrnpwjsc SELECT OBJOID, CLSOID, (2*PRI ... 4,367,543 2 0.23 69k5bhm12sz98 SELECT dbin.instance_number, d... 4,237,165 12 0.23 1tgukkrqj3zhw SELECT OBJOID, CLSOID, (2*PRI ... 4,200,670 1 0.23 7yjzq240hcd2c UPDATE /*+ INDEX(wrh$_seg_sta... 4,112,750 1 0.22 35y2u24f4rxqm insert into wrh$_seg_stat_obj ... 4,084,899 1 0.22 gjm43un5cy843 SELECT SUM(USED), SUM(TOTAL) F... 4,054,235 1 0.22 6xpsr8v27pmy2 insert into WRH$_IOSTAT_FUNCTI... 3,812,015 66 0.20 cumjq42201t37 select u1.user#, u2.user#, u3.... 3,249,905 6 0.17 cabqn4dp09qck SELECT TASK_CLASS, ROUND(NVL(S... 3,007,050 1 0.16 bunssq950snhf insert into wrh$_sga_target_ad... 2,953,541 1 0.16 84k66tf2s7y1c insert into wrh$_bg_event_summ... 2,870,101 1 0.15 730vdzhng6m6g DBMS_SCHEDULER update sys.scheduler$_job set ... 2,817,534 717 0.15 5ms6rbzdnq16t select job, nvl2(last_date, 1,... 2,673,145 1 0.14 fvr1gxctzzr3n DBMS_SCHEDULER update sys.scheduler$_job set ... 2,644,063 86 0.14 ctsfqq07f876g SELECT NVL(CRIT_COUNTER, 0), N... 2,618,155 1 0.14 42cfrr6x5t75c SELECT MAX(DB_NAME), MAX(VERSI... 2,485,086 66 0.13 47a50dvdgnxc2 update sys.job$ set failures=0... 2,471,354 1 0.13 5s34t44u10q4g SELECT a.name task_name, nvl(e... 2,461,904 1 0.13 84ygtc6ucuafk DBMS_SCHEDULER update sys.scheduler$_job set ... 2,406,100 1 0.13 9yt4ka3n2svmc DBMS_SCHEDULER update sys.scheduler$_job set ... 2,349,628 1 0.13 fh2sspdq8rm9p insert into wrh$_waitclassmetr... 2,231,741 1 0.12 ayr8swhks7n2y DBMS_SCHEDULER update sys.scheduler$_job set ... 2,220,149 6 0.12 869avkb73kf5g SELECT NVL((((SUM(DURATION)/(6... 2,133,772 220 0.11 3c1kubcdjnppq update sys.col_usage$ set equa... 2,111,740 6 0.11 2wuxsvgst612h SELECT NVL(AVG(VALUE), 0) FROM... 2,077,993 6 0.11 2rq8p9b3f1n82 SELECT COUNT(BROKEN) FROM USER... 1,967,367 1 0.11 1rac8z6n21f14 SELECT MAX(END_INTERVAL_TIME),... 1,940,690 1 0.10 66gs90fyynks7 insert into wrh$_instance_reco... 1,924,599 1 0.10 cfk4qsrg681sz SELECT MIN(END_INTERVAL_TIME),... 1,674,879 1 0.09 11p815z8hkfms Oracle Enterprise Manager.purge system performan DELETE MGMT_SYSTEM_PERFORMANCE... 1,650,358 6 0.09 8mvxss6cn9q8t SELECT TASK_CLASS, COUNT(*) PE... 1,438,422 36 0.08 94pxkbat2zku7 SELECT NVL(SUM(VALUE), 0), COU... 1,408,160 1 0.08 gdn3ysuyssf82 SELECT advisor_id FROM sys.wri... 1,366,038 66 0.07 aq8yqxyyb40nn update sys.job$ set this_date=... 1,316,579 1 0.07 gjm43un5cy843 SELECT SUM(USED), SUM(TOTAL) F... 1,298,892 242 0.07 gfdn12rn0fg3m SELECT TARGET_GUID FROM MGMT_T... Back to SQL Statistics Back to Top SQL ordered by Version Count Only Statements with Version Count greater than 20 are displayed Version Count Executions SQL Id SQL Module SQL Text 100 86 ctsfqq07f876g SELECT NVL(CRIT_COUNTER, 0), N... 97 6 2wuxsvgst612h SELECT NVL(AVG(VALUE), 0) FROM... 97 66 47a50dvdgnxc2 update sys.job$ set failures=0... 96 1 5s34t44u10q4g SELECT a.name task_name, nvl(e... 96 1 84ygtc6ucuafk DBMS_SCHEDULER update sys.scheduler$_job set ... 95 717 5ms6rbzdnq16t select job, nvl2(last_date, 1,... 94 1 317v5hnvvd49h UPDATE wrh$_seg_stat_obj ob S... 94 6 8mvxss6cn9q8t SELECT TASK_CLASS, COUNT(*) PE... 94 6 cabqn4dp09qck SELECT TASK_CLASS, ROUND(NVL(S... 91 1 1rac8z6n21f14 SELECT MAX(END_INTERVAL_TIME),... 91 66 cumjq42201t37 select u1.user#, u2.user#, u3.... 90 1 fvr1gxctzzr3n DBMS_SCHEDULER update sys.scheduler$_job set ... 89 1 bunssq950snhf insert into wrh$_sga_target_ad... 89 1 cfk4qsrg681sz SELECT MIN(END_INTERVAL_TIME),... 87 1 ayr8swhks7n2y DBMS_SCHEDULER update sys.scheduler$_job set ... 86 1 11p815z8hkfms Oracle Enterprise Manager.purge system performan DELETE MGMT_SYSTEM_PERFORMANCE... 86 1 11p815z8hkfms Oracle Enterprise Manager.purge system performan DELETE MGMT_SYSTEM_PERFORMANCE... 86 1 42cfrr6x5t75c SELECT MAX(DB_NAME), MAX(VERSI... 85 2 69k5bhm12sz98 SELECT dbin.instance_number, d... 85 1 730vdzhng6m6g DBMS_SCHEDULER update sys.scheduler$_job set ... 85 6 869avkb73kf5g SELECT NVL((((SUM(DURATION)/(6... 84 156 bb926a5dcb8kr merge into sys.mon_mods$ m usi... 83 1 6wm3n4d7bnddg SELECT source, (case when tim... 83 1 6xpsr8v27pmy2 insert into WRH$_IOSTAT_FUNCTI... 83 36 94pxkbat2zku7 SELECT NVL(SUM(VALUE), 0), COU... 83 36 94pxkbat2zku7 SELECT NVL(SUM(VALUE), 0), COU... 81 6 2rq8p9b3f1n82 SELECT COUNT(BROKEN) FROM USER... 81 3 9dhn1b8d88dpf select OBJOID, CLSOID, RUNTIME... 81 3 9dhn1b8d88dpf select OBJOID, CLSOID, RUNTIME... 81 1 9yt4ka3n2svmc DBMS_SCHEDULER update sys.scheduler$_job set ... 81 242 gfdn12rn0fg3m SELECT TARGET_GUID FROM MGMT_T... 80 1 gdn3ysuyssf82 SELECT advisor_id FROM sys.wri... 79 1 fh2sspdq8rm9p insert into wrh$_waitclassmetr... 78 1 84k66tf2s7y1c insert into wrh$_bg_event_summ... 78 66 aq8yqxyyb40nn update sys.job$ set this_date=... 75 1 9n8xc314xdm0t insert into wrh$_shared_server... 75 3 a5mmhrrnpwjsc SELECT OBJOID, CLSOID, (2*PRI ... 69 12 bn4b3vjw2mj3u SELECT OBJOID, CLSOID, DECODE(... 64 1 66gs90fyynks7 insert into wrh$_instance_reco... 63 220 3c1kubcdjnppq update sys.col_usage$ set equa... 59 12 1tgukkrqj3zhw SELECT OBJOID, CLSOID, (2*PRI ... 40 1 35y2u24f4rxqm insert into wrh$_seg_stat_obj ... 37 1 7yjzq240hcd2c UPDATE /*+ INDEX(wrh$_seg_sta... 37 1 7yjzq240hcd2c UPDATE /*+ INDEX(wrh$_seg_sta... 34 1 gjm43un5cy843 SELECT SUM(USED), SUM(TOTAL) F... 34 1 gjm43un5cy843 SELECT SUM(USED), SUM(TOTAL) F... Back to SQL Statistics Back to Top Complete List of SQL Text SQL Id SQL Text 089dbukv1aanh SELECT SYS_EXTRACT_UTC(SYSTIMESTAMP) FROM DUAL 0k8522rmdzg4k select privilege# from sysauth$ where (grantee#=:1 or grantee#=1) and privilege#>0 0ws7ahf1d78qa select SYS_CONTEXT('USERENV', 'SERVER_HOST'), SYS_CONTEXT('USERENV', 'DB_UNIQUE_NAME'), SYS_CONTEXT('USERENV', 'INSTANCE_NAME'), SYS_CONTEXT('USERENV', 'SERVICE_NAME'), INSTANCE_NUMBER, STARTUP_TIME, SYS_CONTEXT('USERENV', 'DB_DOMAIN') from v$instance where INSTANCE_NAME=SYS_CONTEXT('USERENV', 'INSTANCE_NAME') 11p815z8hkfms DELETE MGMT_SYSTEM_PERFORMANCE_LOG WHERE TIME < :B2 AND ROWNUM <= :B1 1rac8z6n21f14 SELECT MAX(END_INTERVAL_TIME), COUNT(*) FROM WRM$_SNAPSHOT WHERE SNAP_ID = :B2 AND DBID = :B1 1tgukkrqj3zhw SELECT OBJOID, CLSOID, (2*PRI + DECODE(BITAND(STATUS, 4), 0, 0, DECODE(INST, :1, -1, 1))), WT, INST, DECODE(BITAND(STATUS, 8388608), 0, 0, 1), SCHLIM, ISLW, INST_ID FROM ( select a.obj# OBJOID, a.class_oid CLSOID, a.job_status STATUS, a.flags FLAGS, a.priority PRI, a.job_weight WT, decode(a.running_instance, NULL, 0, a.running_instance) INST, a.schedule_id SCHOID, a.last_start_date LSDATE, a.last_enabled_time LETIME, decode(a.schedule_limit, NULL, decode(bitand(a.flags, 4194304), 4194304, b.schedule_limit, NULL), a.schedule_limit) SCHLIM, 0 ISLW, a.instance_id INST_ID from sys.scheduler$_job a, sys.scheduler$_program b, v$database v where a.program_oid = b.obj#(+) and (a.database_role = v.database_role or (a.database_role is null and v.database_role = 'PRIMARY')) union all select c.obj#, c.class_oid, c.job_status, c.flags, d.priority, d.job_weight, decode(c.running_instance, NULL, 0, c.running_instance), c.schedule_id, c.last_start_date, c.last_enabled_time, d.schedule_limit, 1, c.instance_id from sys.scheduler$_lightweight_job c, sys.scheduler$_program d where c.program_oid = d.obj# and (:2 = 0 or c.running_instance = :3)) WHERE BITAND(FLAGS, 4096) = 4096 AND BITAND(STATUS, 515) = 1 AND ((BITAND(FLAGS, 134217728 + 268435456) = 0) OR (BITAND(STATUS, 1024) <> 0)) AND (SCHOID = :4 OR SCHOID IN (select wm.oid from sys.scheduler$_wingrp_member wm, sys.scheduler$_window_group wg where wm.member_oid = :5 and wm.oid = wg.obj# and bitand(wg.flags, 1) <> 0) ) AND (LSDATE IS NULL OR (LSDATE IS NOT NULL AND (BITAND(STATUS, 16384) <> 0 OR LSDATE < :6))) AND LETIME < :7 AND ((CLSOID IS NOT NULL AND INST_ID IS NULL AND CLSOID IN (select e.obj# from sys.scheduler$_class e where bitand(e.flags, :8) <> 0 and lower(e.affinity) = lower(:9))) OR (INST_ID IS NOT NULL AND INST_ID = :10)) ORDER BY 2, 3, 4 DESC 2rq8p9b3f1n82 SELECT COUNT(BROKEN) FROM USER_JOBS WHERE WHAT = 'EMD_NOTIFICATION.CHECK_FOR_SEVERITIES' 2wuxsvgst612h SELECT NVL(AVG(VALUE), 0) FROM MGMT_SYSTEM_PERFORMANCE_LOG WHERE JOB_NAME=:B2 AND NAME=:B1 AND TIME>(SYSDATE-(1/24)) 317v5hnvvd49h UPDATE wrh$_seg_stat_obj ob SET (snap_id, owner, object_name, subobject_name, tablespace_name, object_type, index_type, base_obj#, base_object_name, base_object_owner) = (SELECT so.snap_id + 1, so.oj.owner_name, so.oj.object_name, so.oj.subobject_name, so.oj.tablespace_name, so.oj.object_type, index_type, coalesce(io.base_obj#, so.base_obj#), coalesce(io.base_object_name, so.base_object_name), coalesce(io.base_object_owner, so.base_object_owner) FROM (SELECT dbid, ts#, obj#, dataobj#, object_type, base_obj#, base_object_name, base_object_owner, snap_id, dbms_swrf_internal.awr_get_object_info( ts#, obj#, dataobj#, AWR_OBJECT_INFO_TYPE(owner, object_name, subobject_name, tablespace_name, object_type)) oj FROM wrh$_seg_stat_obj) so LEFT OUTER JOIN (SELECT decode(ind.type#, 1, 'NORMAL'|| decode(bitand(ind.property, 4), 0, '', 4, '/REV'), 2, 'BITMAP', 3, 'CLUSTER', 4, 'IOT - TOP', 5, 'IOT - NESTED', 6, 'SECONDARY', 7, 'ANSI', 8, 'LOB', 9, 'DOMAIN') as index_type, base_obj.obj# as base_obj#, base_obj.name as base_object_name, base_owner.name as base_object_owner, ind.bo# as ind_base_obj#, ind.obj# as ind_obj#, ind.dataobj# as ind_dataobj# FROM ((sys.ind$ ind JOIN sys.obj$ base_obj ON (ind.bo# = base_obj.obj#)) JOIN sys.user$ base_owner ON (base_obj.owner# = base_owner.user#))) io ON (so.oj.object_type = 'INDEX' AND so.obj# = io.ind_obj# AND so.dataobj# = io.ind_dataobj#) WHERE ob.dbid = so.dbid AND ob.ts# = so.ts# AND ob.obj# = so.obj# AND ob.dataobj# = so.dataobj#) WHERE dbid = :dbid AND object_name NOT LIKE '%MISSING%' AND object_name NOT LIKE '%TRANSIENT%' AND (object_name, NVL(subobject_name, '!')) NOT IN (SELECT name, nvl(subname, '!') FROM obj$ WHERE ob.obj# = obj$.obj#) AND (ts#, obj#, dataobj#) in (SELECT tsn_kewrseg, objn_kewrseg, objd_kewrseg FROM x$kewrtsegstat) 350myuyx0t1d6 insert into wrh$_tablespace_stat (snap_id, dbid, instance_number, ts#, tsname, contents, status, segment_space_management, extent_management, is_backup) select :snap_id, :dbid, :instance_number, ts.ts#, ts.name as tsname, decode(ts.contents$, 0, (decode(bitand(ts.flags, 16), 16, 'UNDO', 'PERMANENT')), 1, 'TEMPORARY') as contents, decode(ts.online$, 1, 'ONLINE', 2, 'OFFLINE', 4, 'READ ONLY', 'UNDEFINED') as status, decode(bitand(ts.flags, 32), 32, 'AUTO', 'MANUAL') as segspace_mgmt, decode(ts.bitmapped, 0, 'DICTIONARY', 'LOCAL') as extent_management, (case when b.active_count > 0 then 'TRUE' else 'FALSE' end) as is_backup from sys.ts$ ts, (select dfile.ts#, sum( case when bkup.status = 'ACTIVE' then 1 else 0 end ) as active_count from v$backup bkup, file$ dfile where bkup.file# = dfile.file# and dfile.status$ = 2 group by dfile.ts#) b where ts.online$ != 3 and bitand(ts.flags, 2048) != 2048 and ts.ts# = b.ts# 35y2u24f4rxqm insert into wrh$_seg_stat_obj ( snap_id , dbid , ts# , obj# , dataobj# , owner , object_name , subobject_name , partition_type , object_type , tablespace_name) select :lah_snap_id , :dbid , ss1.tsn_kewrseg , ss1.objn_kewrseg , ss1.objd_kewrseg , ss1.ownername_kewrseg , ss1.objname_kewrseg , ss1.subobjname_kewrseg , decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST', NULL, 'NONE', 'UNKNOWN') , sys.dbms_swrf_internal.awr_decode_object_type(ss1.objtype_kewrseg) , ss1.tsname_kewrseg from x$kewrattrnew at, x$kewrtsegstat ss1, (select tp.obj#, pob.parttype from sys.tabpart$ tp, sys.partobj$ pob where tp.bo# = pob.obj# union all select ip.obj#, pob.parttype from sys.indpart$ ip, sys.partobj$ pob where ip.bo# = pob.obj#) po where at.num1_kewrattr = ss1.objn_kewrseg and at.num2_kewrattr = ss1.objd_kewrseg and at.num1_kewrattr = po.obj#(+) and (ss1.objtype_kewrseg not in (1 /* INDEX - handled below */, 10 /* NON-EXISTENT */) or (ss1.objtype_kewrseg = 1 and 1 = (select 1 from ind$ i where i.obj# = ss1.objn_kewrseg and i.type# in (1, 2, 3, 4, 5, 6, 7, 8, 9)))) and ss1.objname_kewrseg != '_NEXT_OBJECT' and ss1.objname_kewrseg != '_default_auditing_options_' 3am9cfkvx7gq1 CALL MGMT_ADMIN_DATA.EVALUATE_MGMT_METRICS(:target_guid, :metric_guid, :metric_values) 3c1kubcdjnppq update sys.col_usage$ set equality_preds = equality_preds + decode(bitand(:flag, 1), 0, 0, 1), equijoin_preds = equijoin_preds + decode(bitand(:flag, 2), 0, 0, 1), nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1), range_preds = range_preds + decode(bitand(:flag, 8), 0, 0, 1), like_preds = like_preds + decode(bitand(:flag, 16), 0, 0, 1), null_preds = null_preds + decode(bitand(:flag, 32), 0, 0, 1), timestamp = :time where obj# = :objn and intcol# = :coln 42cfrr6x5t75c SELECT MAX(DB_NAME), MAX(VERSION) FROM WRM$_DATABASE_INSTANCE WHERE DBID = :B1 AND STARTUP_TIME = (SELECT MAX(STARTUP_TIME) FROM WRM$_DATABASE_INSTANCE WHERE DBID = :B1 AND STARTUP_TIME <= :B2 ) 459f3z9u4fb3u select value$ from props$ where name = 'GLOBAL_DB_NAME' 47a50dvdgnxc2 update sys.job$ set failures=0, this_date=null, flag=:1, last_date=:2, next_date = greatest(:3, sysdate), total=total+(sysdate-nvl(this_date, sysdate)) where job=:4 4vs91dcv7u1p6 insert into sys.aud$( sessionid, entryid, statement, ntimestamp#, userid, userhost, terminal, action#, returncode, obj$creator, obj$name, auth$privileges, auth$grantee, new$owner, new$name, ses$actions, ses$tid, logoff$pread, logoff$lwrite, logoff$dead, comment$text, spare1, spare2, priv$used, clientid, sessioncpu, proxy$sid, user$guid, instance#, process#, xid, scn, auditid, sqlbind, sqltext, obj$edition, dbid) values(:1, :2, :3, SYS_EXTRACT_UTC(SYSTIMESTAMP), :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26, :27, :28, :29, :30, :31, :32, :33, :34, :35, :36) 5ms6rbzdnq16t select job, nvl2(last_date, 1, 0) from sys.job$ where (((:1 <= next_date) and (next_date <= :2)) or ((last_date is null) and (next_date < :3))) and (field1 = :4 or (field1 = 0 and 'Y' = :5)) and (this_date is null) and ((dbms_logstdby.db_is_logstdby = 0 and job < 1000000000) or (dbms_logstdby.db_is_logstdby = 1 and job >= 1000000000)) order by next_date, job 5s34t44u10q4g SELECT a.name task_name, nvl(e.status, a.status) status#, a.last_exec_name as last_execution, e.exec_type_id as execution_type# FROM wri$_adv_tasks a, wri$_adv_executions e WHERE a.id = e.task_id(+) and a.advisor_id = e.advisor_id(+) and a.last_exec_name = e.name(+) and a.id = :1 5ur69atw3vfhj select decode(failover_method, NULL, 0 , 'BASIC', 1, 'PRECONNECT', 2 , 'PREPARSE', 4 , 0), decode(failover_type, NULL, 1 , 'NONE', 1 , 'SESSION', 2, 'SELECT', 4, 1), failover_retries, failover_delay, flags from service$ where name = :1 5zruc4v6y32f9 DECLARE job BINARY_INTEGER := :job; next_date TIMESTAMP WITH TIME ZONE := :mydate; broken BOOLEAN := FALSE; job_name VARCHAR2(30) := :job_name; job_subname VARCHAR2(30) := :job_subname; job_owner VARCHAR2(30) := :job_owner; job_start TIMESTAMP WITH TIME ZONE := :job_start; job_scheduled_start TIMESTAMP WITH TIME ZONE := :job_scheduled_start; window_start TIMESTAMP WITH TIME ZONE := :window_start; window_end TIMESTAMP WITH TIME ZONE := :window_end; chain_id VARCHAR2(14) := :chainid; credential_owner varchar2(30) := :credown; credential_name varchar2(30) := :crednam; destination_owner varchar2(30) := :destown; destination_name varchar2(30) := :destnam; job_dest_id varchar2(14) := :jdestid; log_id number := :log_id; BEGIN DECLARE ename VARCHAR2(30); BEGIN ename := dbms_sqltune.execute_tuning_task( 'SYS_AUTO_SQL_TUNING_TASK'); END; :mydate := next_date; IF broken THEN :b := 1; ELSE :b := 0; END IF; END; 66gs90fyynks7 insert into wrh$_instance_recovery (snap_id, dbid, instance_number, recovery_estimated_ios, actual_redo_blks, target_redo_blks, log_file_size_redo_blks, log_chkpt_timeout_redo_blks, log_chkpt_interval_redo_blks, fast_start_io_target_redo_blks, target_mttr, estimated_mttr, ckpt_block_writes, optimal_logfile_size, estd_cluster_available_time, writes_mttr, writes_logfile_size, writes_log_checkpoint_settings, writes_other_settings, writes_autotune, writes_full_thread_ckpt) select :snap_id, :dbid, :instance_number, recovery_estimated_ios, actual_redo_blks, target_redo_blks, log_file_size_redo_blks, log_chkpt_timeout_redo_blks, log_chkpt_interval_redo_blks, fast_start_io_target_redo_blks, target_mttr, estimated_mttr, ckpt_block_writes, optimal_logfile_size, estd_cluster_available_time, writes_mttr, writes_logfile_size, writes_log_checkpoint_settings, writes_other_settings, writes_autotune, writes_full_thread_ckpt from v$instance_recovery 69k5bhm12sz98 SELECT dbin.instance_number, dbin.db_name, dbin.instance_name, dbin.host_name, dbin.version, CASE WHEN s1.startup_time = s2.startup_time THEN 0 ELSE 1 END as bounce, CAST(s1.end_interval_time AS DATE) as begin_time, CAST(s2.end_interval_time AS DATE) as end_time, ROUND((cast( (case when s2.end_interval_time > s1.end_interval_time then s2.end_interval_time else s1.end_interval_time end) as date) - cast(s1.end_interval_time as date)) * 86400) as int_secs, CASE WHEN (s1.status <> 0 OR s2.status <> 0) THEN 1 ELSE 0 END as err_detect, round( greatest( (extract(day from s2.flush_elapsed) * 86400) + (extract(hour from s2.flush_elapsed) * 3600) + (extract(minute from s2.flush_elapsed) * 60) + extract(second from s2.flush_elapsed), (extract(day from s1.flush_elapsed) * 86400) + (extract(hour from s1.flush_elapsed) * 3600) + (extract(minute from s1.flush_elapsed) * 60) + extract(second from s1.flush_elapsed), 0 )) as max_flush_secs FROM WRM$_SNAPSHOT s1 , WRM$_DATABASE_INSTANCE dbin , WRM$_SNAPSHOT s2 WHERE s1.dbid = :dbid AND s2.dbid = :dbid AND s1.instance_number = s2.instance_number AND dbin.instance_number = s1.instance_number AND s1.snap_id = :bid AND s2.snap_id = :eid AND dbin.dbid = s1.dbid AND dbin.startup_time = s1.startup_time and dbin.instance_number = :inst 6ajkhukk78nsr begin prvt_hdm.auto_execute( :dbid, :inst_num , :end_snap_id ); end; 6gvch1xu9ca3g DECLARE job BINARY_INTEGER := :job; next_date DATE := :mydate; broken BOOLEAN := FALSE; BEGIN EMD_MAINTENANCE.EXECUTE_EM_DBMS_JOB_PROCS(); :mydate := next_date; IF broken THEN :b := 1; ELSE :b := 0; END IF; END; 6mcpb06rctk0x call dbms_space.auto_space_advisor_job_proc ( ) 6wm3n4d7bnddg SELECT source, (case when time_secs < 1 then 1 else time_secs end) as time_secs, operation FROM ( SELECT 1 as source, trunc((sysdate - cast(ll.log_date as date)) * 86400) as time_secs, decode(ll.operation, 'OPEN', 0 , 1 ) as operation, ll.log_id as log_id FROM DBA_SCHEDULER_WINDOW_LOG ll , ( SELECT max(l.log_id) as max_log_id FROM DBA_SCHEDULER_WINDOW_LOG l , DBA_SCHEDULER_WINGROUP_MEMBERS m WHERE l.window_name = m.window_name AND m.window_group_name = 'MAINTENANCE_WINDOW_GROUP' AND l.operation in ('OPEN', 'CLOSE') AND CAST(l.log_date AS DATE) < ( SELECT cast(min(end_interval_time) as date) as btime FROM WRM$_SNAPSHOT bsi WHERE bsi.dbid = :dbid AND bsi.instance_number = :inst AND bsi.snap_id = :bid ) ) max_log WHERE ll.log_id = max_log.max_log_id UNION ALL SELECT 2 as source, trunc((sysdate - cast(l.log_date as date)) * 86400) as time_secs, decode(l.operation, 'OPEN', 0 , 1 ) as operation, l.log_id as log_id FROM DBA_SCHEDULER_WINDOW_LOG l , DBA_SCHEDULER_WINGROUP_MEMBERS m WHERE l.window_name = m.window_name AND m.window_group_name = 'MAINTENANCE_WINDOW_GROUP' AND l.operation in ('OPEN', 'CLOSE') AND CAST(l.log_date AS DATE) <= ( SELECT cast(max(end_interval_time) as date) as etime FROM WRM$_SNAPSHOT esi WHERE esi.dbid = :dbid AND esi.instance_number = :inst AND esi.snap_id = :eid ) AND CAST(l.log_date AS DATE) >= ( SELECT cast(min(end_interval_time) as date) as btime FROM WRM$_SNAPSHOT bsi WHERE bsi.dbid = :dbid AND bsi.instance_number = :inst AND bsi.snap_id = :bid ) UNION ALL SELECT 0 as source, trunc((sysdate - et.etime) * 86400) as time_secs, 3 as operation, 0 as log_id FROM ( SELECT cast(max(end_interval_time) as date) as etime FROM WRM$_SNAPSHOT esi WHERE esi.dbid = :dbid AND esi.instance_number = :inst AND esi.snap_id = :eid ) et UNION ALL SELECT 0 as source, trunc((sysdate - bt.btime) * 86400) as time_secs, 2 as operation, 0 as log_id FROM ( SELECT cast(min(end_interval_time) as date) as btime FROM WRM$_SNAPSHOT bsi WHERE bsi.dbid = :dbid AND bsi.instance_number = :inst AND bsi.snap_id = :bid ) bt ) WHERE time_secs >= 0 ORDER BY source ASC, time_secs DESC, log_id ASC 6xpsr8v27pmy2 insert into WRH$_IOSTAT_FUNCTION (snap_id, dbid, instance_number, function_id, small_read_megabytes, small_write_megabytes, large_read_megabytes, large_write_megabytes, small_read_reqs, small_write_reqs, large_read_reqs, large_write_reqs, number_of_waits, wait_time) (select :snap_id, :dbid, :instance_number, function_id, sum(small_read_megabytes) small_read_megabytes, sum(small_write_megabytes) small_write_megabytes, sum(large_read_megabytes) large_read_megabytes, sum(large_write_megabytes) large_write_megabytes, sum(small_read_reqs) small_read_reqs, sum(small_write_reqs) small_write_reqs, sum(large_read_reqs) large_read_reqs, sum(large_write_reqs) large_write_reqs, sum(number_of_waits) number_of_waits, sum(wait_time) wait_time from v$iostat_function group by function_id) 730vdzhng6m6g update sys.scheduler$_job set next_run_date = :1, last_end_date = :2, retry_count = :3, run_count = :4, running_instance = :5, running_slave = :6, job_status = :7 where obj# = :8 7yjzq240hcd2c UPDATE /*+ INDEX(wrh$_seg_stat_obj wrh$_seg_stat_obj_index) */ wrh$_seg_stat_obj ob SET (snap_id, owner, object_name, subobject_name, tablespace_name, object_type, index_type, base_obj#, base_object_name, base_object_owner) = (SELECT :lah_snap_id, so.oj.owner_name, so.oj.object_name, so.oj.subobject_name, so.oj.tablespace_name, so.oj.object_type, index_type, coalesce(io.base_obj#, so.base_obj#), coalesce(io.base_object_name, so.base_object_name), coalesce(io.base_object_owner, so.base_object_owner) FROM (SELECT dbid, ts#, obj#, dataobj#, object_type, base_obj#, base_object_name, base_object_owner, dbms_swrf_internal.awr_get_object_info( ts#, obj#, dataobj#, AWR_OBJECT_INFO_TYPE(owner, object_name, subobject_name, tablespace_name, object_type)) oj FROM wrh$_seg_stat_obj) so LEFT OUTER JOIN (SELECT decode(ind.type#, 1, 'NORMAL'|| decode(bitand(ind.property, 4), 0, '', 4, '/REV'), 2, 'BITMAP', 3, 'CLUSTER', 4, 'IOT - TOP', 5, 'IOT - NESTED', 6, 'SECONDARY', 7, 'ANSI', 8, 'LOB', 9, 'DOMAIN') as index_type, base_obj.obj# as base_obj#, base_obj.name as base_object_name, base_owner.name as base_object_owner, ind.bo# as ind_base_obj#, ind.obj# as ind_obj#, ind.dataobj# as ind_dataobj# FROM ((sys.ind$ ind JOIN sys.obj$ base_obj ON (ind.bo# = base_obj.obj#)) JOIN sys.user$ base_owner ON (base_obj.owner# = base_owner.user#))) io ON (so.oj.object_type = 'INDEX' AND so.obj# = io.ind_obj# AND so.dataobj# = io.ind_dataobj#) WHERE ob.dbid = so.dbid AND ob.ts# = so.ts# AND ob.obj# = so.obj# AND ob.dataobj# = so.dataobj#) WHERE dbid = :dbid AND snap_id > :lah_snap_id - 10 AND (object_name LIKE '%UNAVAIL%' OR (object_type LIKE '%UNDEF%' AND object_name NOT LIKE '%MISSING%' AND object_name NOT LIKE '%TRANSIENT%') OR owner LIKE '%UNAVAIL%' OR tablespace_name LIKE '%UNAVAIL%') 84k66tf2s7y1c insert into wrh$_bg_event_summary (snap_id, dbid, instance_number, event_id, total_waits, total_timeouts, time_waited_micro) select :snap_id, :dbid, :instance_number, event_id, total_waits - total_waits_fg, total_timeouts - total_timeouts_fg, time_waited_micro - time_waited_micro_fg from v$system_event where (total_waits - total_waits_fg) > 0 order by event_id 84ygtc6ucuafk update sys.scheduler$_job set job_status = :1 where obj# = :2 869avkb73kf5g SELECT NVL((((SUM(DURATION)/(60*1000))/60)*100), 0), NVL(AVG((VALUE*1000.0)/DURATION), 0) FROM MGMT_SYSTEM_PERFORMANCE_LOG WHERE IS_TOTAL='Y' AND DURATION > 0 AND TIME > (SYSDATE-(1/24)) AND JOB_NAME = 'JOB_DISPATCHER' AND HOST_URL = :B1 8mvxss6cn9q8t SELECT TASK_CLASS, COUNT(*) PENDING FROM MGMT_COLLECTION_TASKS WHERE NEXT_COLLECTION_TIMESTAMP <= SYS_EXTRACT_UTC(SYSTIMESTAMP) AND FREQUENCY_CODE != :B1 GROUP BY TASK_CLASS 8untjv9m3brr3 SELECT U.SPACE_USED, U.SPACE_ALLOCATED FROM TABLE(DBMS_SPACE.OBJECT_SPACE_USAGE_TBF( :B1 , :B2 , :B3 , 0, :B4 , 'TRUE', 1)) U 94pxkbat2zku7 SELECT NVL(SUM(VALUE), 0), COUNT(*) FROM MGMT_SYSTEM_PERFORMANCE_LOG WHERE NAME = :B1 || '_TOTAL_DELIVERY_TIME' AND TIME > (SYSDATE-(1/(24*6))) 9dhn1b8d88dpf select OBJOID, CLSOID, RUNTIME, PRI, JOBTYPE, SCHLIM, WT, INST, RUNNOW, ENQ_SCHLIM from ( select a.obj# OBJOID, a.class_oid CLSOID, decode(bitand(a.flags, 16384), 0, a.next_run_date, a.last_enabled_time) RUNTIME, (2*a.priority + decode(bitand(a.job_status, 4), 0, 0, decode(a.running_instance, :1, -1, 1))) PRI, 1 JOBTYPE, decode(a.schedule_limit, NULL, decode(bitand(a.flags, 4194304), 4194304, p.schedule_limit, NULL), a.schedule_limit) SCHLIM, a.job_weight WT, decode(a.running_instance, NULL, 0, a.running_instance) INST, decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW, decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM from sys.scheduler$_job a, sys.scheduler$_program p, v$database v, v$instance i where a.program_oid = p.obj#(+) and bitand(a.job_status, 515) = 1 and bitand(a.flags, 1048576) = 0 and ((bitand(a.flags, 134217728 + 268435456) = 0) or (bitand(a.job_status, 1024) <> 0)) and bitand(a.flags, 4096) = 0 and (a.next_run_date <= :2 or bitand(a.flags, 16384) <> 0) and a.instance_id is null and (a.class_oid is null or (a.class_oid is not null and a.class_oid in (select b.obj# from sys.scheduler$_class b where b.affinity is null))) and (a.database_role = v.database_role or (a.database_role is null and v.database_role = 'PRIMARY')) and ( i.logins = 'ALLOWED' or bitand(a.flags, 17179869184) <> 0 ) union all select l.obj#, l.class_oid, decode(bitand(l.flags, 16384), 0, l.next_run_date, l.last_enabled_time), (2*decode(bitand(l.flags, 8589934592), 0, q.priority, pj.priority) + decode(bitand(l.job_status, 4), 0, 0, decode(l.running_instance, :3, -1, 1))), 1, decode(bitand(l.flags, 8589934592), 0, q.schedule_limit, decode(pj.schedule_limit, NULL, q.schedule_limit, pj.schedule_limit)), decode(bitand(l.flags, 8589934592), 0, q.job_weight, pj.job_weight), decode(l.running_instance, NULL, 0, l.running_instance), decode(bitand(l.flags, 16384), 0, 0, 1), decode(bitand(l.job_status, 8388608), 0, 0, 1) from sys.scheduler$_lightweight_job l, sys.scheduler$_program q, (select sl.obj# obj#, decode(bitand(sl.flags, 8589934592), 0, sl.program_oid, spj.program_oid) program_oid, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.priority) priority, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.job_weight) job_weight, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.schedule_limit) schedule_limit from sys.scheduler$_lightweight_job sl, scheduler$_job spj where sl.program_oid = spj.obj#(+)) pj , v$instance i where pj.obj# = l.obj# and pj.program_oid = q.obj#(+) and (:4 = 0 or l.running_instance = :5) and bitand(l.job_status, 515) = 1 and ((bitand(l.flags, 134217728 + 268435456) = 0) or (bitand(l.job_status, 1024) <> 0)) and bitand(l.flags, 4096) = 0 and (l.next_run_date <= :6 or bitand(l.flags, 16384) <> 0) and l.instance_id is null and (l.class_oid is null or (l.class_oid is not null and l.class_oid in (select w.obj# from sys.scheduler$_class w where w.affinity is null))) and ( i.logins = 'ALLOWED' or bitand(l.flags, 17179869184) <> 0 ) union all select c.obj#, 0, c.next_start_date, 0, 2, c.duration, 1, 0, 0, 0 from sys.scheduler$_window c , v$instance i where bitand(c.flags, 1) <> 0 and bitand(c.flags, 2) = 0 and bitand(c.flags, 64) = 0 and c.next_start_date <= :7 and i.logins = 'ALLOWED' union all select d.obj#, 0, d.next_start_date + d.duration, 0, 4, numtodsinterval(0, 'minute'), 1, 0, 0, 0 from sys.scheduler$_window d , v$instance i where bitand(d.flags, 1) <> 0 and bitand(d.flags, 2) = 0 and bitand(d.flags, 64) = 0 and d.next_start_date <= :8 and i.logins = 'ALLOWED' union all select f.obj#, 0, e.attr_tstamp, 0, decode(bitand(e.flags, 131072), 0, 2, 3), e.attr_intv, 1, 0, 0, 0 from sys.scheduler$_global_attribute e, sys.obj$ f, sys.obj$ g, v$instance i where e.obj# = g.obj# and g.owner# = 0 and g.name = 'CURRENT_OPEN_WINDOW' and e.value = f.name and f.type# = 69 and e.attr_tstamp is not null and e.attr_intv is not null and i.logins = 'ALLOWED' union all select i.obj#, 0, h.attr_tstamp + h.attr_intv, 0, decode(bitand(h.flags, 131072), 0, 4, 5), numtodsinterval(0, 'minute'), 1, 0, 0, 0 from sys.scheduler$_global_attribute h, sys.obj$ i, sys.obj$ j, v$instance ik where h.obj# = j.obj# and j.owner# = 0 and j.name = 'CURRENT_OPEN_WINDOW' and h.value = i.name and i.type# = 69 and h.attr_tstamp is not null and h.attr_intv is not null and ik.logins = 'ALLOWED') order by RUNTIME, JOBTYPE, CLSOID, PRI, WT DESC, OBJOID 9jcq4ds92q5f5 create table \"FLUXMMS\".DBMS_TABCOMP_TEMP_CMP organization heap tablespace \"USERS\" compress for all operations nologging as select /*+ DYNAMIC_SAMPLING(0) */ * from \"FLUXMMS\".DBMS_TABCOMP_TEMP_UNCMP mytab 9n8xc314xdm0t insert into wrh$_shared_server_summary (snap_id, dbid, instance_number, num_samples, sample_time, sampled_total_conn, sampled_active_conn, sampled_total_srv, sampled_active_srv, sampled_total_disp, sampled_active_disp, srv_busy, srv_idle, srv_in_net, srv_out_net, srv_messages, srv_bytes, cq_wait, cq_totalq, dq_totalq) select :snap_id, :dbid, :instance_number, a.kmmsasnum, a.kmmsastime, a.kmmsastvc, a.kmmsasavc, a.kmmsastsrv, a.kmmsasasrv, a.kmmsastdisp, a.kmmsasadisp, s.busy, s.idle, s.in_net, s.out_net, s.messages, s.bytes, cq.wait, cq.totalq, dq.totalq from x$kmmsas a, (select sum(wait) as wait, sum(totalq) as totalq from v$queue where type = 'COMMON') cq, (select sum(busy) as busy, sum(idle) as idle, sum(in_net) as in_net, sum(out_net) as out_net, sum(messages) as messages, sum(bytes) as bytes from (select sum(busy) as busy, sum(idle) as idle, sum(in_net) as in_net, sum(out_net) as out_net, sum(messages) as messages, sum(bytes) as bytes from v$shared_server union select kmmhstsbsy, kmmhstsidl, kmmhstsneti, kmmhstsneto, kmmhstsnmg, kmmhstsnmb from x$kmmhst)) s, (select sum(totalq) as totalq from (select sum(totalq) as totalq from v$queue where type = 'DISPATCHER' union select kmmhstdqtnc from x$kmmhst)) dq 9yt4ka3n2svmc update sys.scheduler$_job set last_enabled_time = :1, next_run_date = :2, job_status = :3 where obj# = :4 a5mmhrrnpwjsc SELECT OBJOID, CLSOID, (2*PRI + DECODE(BITAND(STATUS, 4), 0, 0, DECODE(INST, :1, -1, 1))), WT, INST, DECODE(BITAND(STATUS, 8388608), 0, 0, 1), SCHLIM, ISLW, INST_ID FROM ( select a.obj# OBJOID, a.class_oid CLSOID, a.job_status STATUS, a.flags FLAGS, a.priority PRI, a.job_weight WT, decode(a.running_instance, NULL, 0, a.running_instance) INST, a.schedule_id SCHOID, a.last_start_date LSDATE, a.last_enabled_time LETIME, decode(a.schedule_limit, NULL, decode(bitand(a.flags, 4194304), 4194304, b.schedule_limit, NULL), a.schedule_limit) SCHLIM, 0 ISLW, a.instance_id INST_ID from sys.scheduler$_job a, sys.scheduler$_program b, v$database v where a.program_oid = b.obj#(+) and (a.database_role = v.database_role or (a.database_role is null and v.database_role = 'PRIMARY')) union all select c.obj#, c.class_oid, c.job_status, c.flags, d.priority, d.job_weight, decode(c.running_instance, NULL, 0, c.running_instance), c.schedule_id, c.last_start_date, c.last_enabled_time, d.schedule_limit, 1, c.instance_id from sys.scheduler$_lightweight_job c, sys.scheduler$_program d where c.program_oid = d.obj# and (:2 = 0 or c.running_instance = :3)) WHERE BITAND(FLAGS, 4096) = 4096 AND BITAND(STATUS, 515) = 1 AND ((BITAND(FLAGS, 134217728 + 268435456) = 0) OR (BITAND(STATUS, 1024) <> 0)) AND (SCHOID = :4 OR SCHOID IN (select wm.oid from sys.scheduler$_wingrp_member wm, sys.scheduler$_window_group wg where wm.member_oid = :5 and wm.oid = wg.obj# and bitand(wg.flags, 1) <> 0) ) AND (LSDATE IS NULL OR (LSDATE IS NOT NULL AND (BITAND(STATUS, 16384) <> 0 OR LSDATE < :6))) AND LETIME < :7 AND INST_ID IS NULL AND (CLSOID IS NULL OR (CLSOID IS NOT NULL AND (CLSOID IN (select e.obj# from sys.scheduler$_class e where e.affinity is null)))) ORDER BY 2, 3, 4 DESC aq8yqxyyb40nn update sys.job$ set this_date=:1 where job=:2 ayr8swhks7n2y update sys.scheduler$_job set flags = :1, start_date = :2, dist_flags = :3 where obj# = :4 bb926a5dcb8kr merge into sys.mon_mods$ m using dual on (m.obj# = :objn and (:pobjn = 0 or m.obj# = :pobjn or m.obj# in (select obj# from tabpart$ where bo# = :pobjn and obj# = :objn union all select obj# from tabcompart$ where bo# = :pobjn and obj# = :objn union all select tsp.obj# from tabsubpart$ tsp, tabcompart$ tcp where tsp.pobj# = tcp.obj# and (tcp.bo# = :pobjn or tcp.obj# = :pobjn) and tsp.obj# = :objn))) when matched then update set inserts = inserts + :ins, updates = updates + :upd, deletes = deletes + :del, flags = (decode(bitand(flags, :flag), :flag, flags, flags + :flag)), drop_segments = drop_segments + :dropseg, timestamp = :time when NOT matched then insert (obj#, inserts, updates, deletes, timestamp, flags, drop_segments) values (:objn, :ins, :upd, :del, :time, :flag, :dropseg) bn4b3vjw2mj3u SELECT OBJOID, CLSOID, DECODE(BITAND(FLAGS, 16384), 0, RUNTIME, LETIME), (2*PRI + DECODE(BITAND(STATUS, 4), 0, 0, decode(INST, :1, -1, 1))), JOBTYPE, SCHLIM, WT, INST, RUNNOW, ENQ_SCHLIM, INST_ID FROM ( select a.obj# OBJOID, a.class_oid CLSOID, a.next_run_date RUNTIME, a.last_enabled_time LETIME, a.flags FLAGS, a.job_status STATUS, 1 JOBTYPE, a.priority PRI, decode(a.schedule_limit, NULL, decode(bitand(a.flags, 4194304), 4194304, b.schedule_limit, NULL), a.schedule_limit) SCHLIM, a.job_weight WT, decode(a.running_instance, NULL, 0, a.running_instance) INST, decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW, decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM, a.instance_id INST_ID from sys.scheduler$_job a, sys.scheduler$_program b, v$database v , v$instance i where a.program_oid = b.obj#(+) and (a.database_role = v.database_role or (a.database_role is null and v.database_role = 'PRIMARY')) and ( i.logins = 'ALLOWED' or bitand(a.flags, 17179869184) <> 0 ) union all select c.obj#, c.class_oid, c.next_run_date, c.last_enabled_time, c.flags, c.job_status, 1, decode(bitand(c.flags, 8589934592), 0, d.priority, pj.priority), decode(bitand(c.flags, 8589934592), 0, d.schedule_limit, decode(pj.schedule_limit, NULL, d.schedule_limit, pj.schedule_limit)), decode(bitand(c.flags, 8589934592), 0, d.job_weight, pj.job_weight), decode(c.running_instance, NULL, 0, c.running_instance), decode(bitand(c.flags, 16384), 0, 0, 1) RUNNOW, decode(bitand(c.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM, c.instance_id INST_ID from sys.scheduler$_lightweight_job c, sys.scheduler$_program d, (select sl.obj# obj#, decode(bitand(sl.flags, 8589934592), 0, sl.program_oid, spj.program_oid) program_oid, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.priority) priority, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.job_weight) job_weight, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.schedule_limit) schedule_limit from sys.scheduler$_lightweight_job sl, scheduler$_job spj where sl.program_oid = spj.obj#(+)) pj, v$instance i where pj.obj# = c.obj# and pj.program_oid = d.obj#(+) and ( i.logins = 'ALLOWED' or bitand(c.flags, 17179869184) <> 0 ) and (:2 = 0 or c.running_instance = :3)) WHERE BITAND(STATUS, 515) = 1 AND BITAND(FLAGS, 1048576) = 0 AND ((BITAND(FLAGS, 134217728 + 268435456) = 0) OR (BITAND(STATUS, 1024) <> 0)) AND BITAND(FLAGS, 4096) = 0 AND (RUNTIME <= :4 OR BITAND(FLAGS, 16384) <> 0) and ((CLSOID is not null and INST_ID is null and CLSOID in (select e.obj# from sys.scheduler$_class e where bitand(e.flags, :5) <> 0 and lower(e.affinity) = lower(:6))) or (INST_ID is not null and INST_ID = :7)) ORDER BY 3, 2, 4, 7 DESC, 1 bunssq950snhf insert into wrh$_sga_target_advice (snap_id, dbid, instance_number, SGA_SIZE, SGA_SIZE_FACTOR, ESTD_DB_TIME, ESTD_PHYSICAL_READS) select :snap_id, :dbid, :instance_number, SGA_SIZE, SGA_SIZE_FACTOR, ESTD_DB_TIME, ESTD_PHYSICAL_READS from v$sga_target_advice bursc6qqb9r40 select count(*) cnt from \"FLUXMMS\".DBMS_TABCOMP_TEMP_CMP cabqn4dp09qck SELECT TASK_CLASS, ROUND(NVL(SUM(THROUGHPUT), 0), 2), NVL(SUM(TOTAL_VALUE), 0), NVL(SUM(TOTAL_DURATION), 0) FROM (SELECT CLIENT_DATA WORKER_ID, ACTION TASK_CLASS, NVL(AVG(VALUE*1000/ DECODE(DURATION, 0, 1000, DURATION)), 0) THROUGHPUT, SUM(VALUE) TOTAL_VALUE, SUM(DURATION)/1000 TOTAL_DURATION, COUNT(*) RECORDS FROM MGMT_SYSTEM_PERFORMANCE_LOG LOG WHERE LOG.JOB_NAME = :B3 AND LOG.MODULE = :B2 AND LOG.TIME > (SYSDATE-:B1 /1440) AND LOG.IS_TOTAL = 'Y' GROUP BY CLIENT_DATA, ACTION ) GROUP BY TASK_CLASS cfk4qsrg681sz SELECT MIN(END_INTERVAL_TIME), COUNT(*) FROM WRM$_SNAPSHOT WHERE SNAP_ID = :B2 AND DBID = :B1 cm5vu20fhtnq1 select /*+ connect_by_filtering */ privilege#, level from sysauth$ connect by grantee#=prior privilege# and privilege#>0 start with grantee#=:1 and privilege#>0 ctsfqq07f876g SELECT NVL(CRIT_COUNTER, 0), NVL(WARN_COUNTER, 0), NVL(INFO_COUNTER, 0) FROM MGMT_POLICY_ASSOC_EVAL_DETAILS WHERE TARGET_GUID = :B4 AND POLICY_GUID = :B3 AND RESULT_KEY_VALUE = :B2 AND COLL_NAME = :B1 cumjq42201t37 select u1.user#, u2.user#, u3.user#, failures, flag, interval#, what, nlsenv, env, field1, next_date from sys.job$ j, sys.user$ u1, sys.user$ u2, sys.user$ u3 where job=:1 and (next_date <= sysdate or :2 != 0) and lowner = u1.name and powner = u2.name and cowner = u3.name djp8c1d3gfwpc SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1), 0), NVL(SUM(C2), 0) FROM (SELECT /*+ NO_PARALLEL(\"DBMS_TABCOMP_TEMP_CMP\") FULL(\"DBMS_TABCOMP_TEMP_CMP\") NO_PARALLEL_INDEX(\"DBMS_TABCOMP_TEMP_CMP\") */ 1 AS C1, 1 AS C2 FROM \"FLUXMMS\".\"DBMS_TABCOMP_TEMP_CMP\" SAMPLE BLOCK (3.114187 , 1) SEED (1) \"DBMS_TABCOMP_TEMP_CMP\") SAMPLESUB f711myt0q6cma insert into sys.aud$( sessionid, entryid, statement, ntimestamp#, userid, userhost, terminal, action#, returncode, logoff$lread, logoff$pread, logoff$lwrite, logoff$dead, logoff$time, comment$text, spare1, clientid, sessioncpu, proxy$sid, user$guid, instance#, process#, auditid, dbid) values(:1, :2, :3, SYS_EXTRACT_UTC(SYSTIMESTAMP), :4, :5, :6, :7, :8, :9, :10, :11, :12, cast(SYS_EXTRACT_UTC(systimestamp) as date), :13, :14, :15, :16, :17, :18, :19, :20, :21, :22) fh2sspdq8rm9p insert into wrh$_waitclassmetric_history (snap_id, dbid, instance_number, wait_class_id, begin_time, end_time, intsize, group_id, average_waiter_count, dbtime_in_wait, time_waited, wait_count, time_waited_fg, wait_count_fg) select :snap_id, :dbid, :instance_number, wait_id, begtime, endtime, intsize_csec, groupid, average_waiter_count, dbtime_in_wait, time_waited, wait_count, time_waited_fg, wait_count_fg from x$kewmevmv fs436064p5sw3 /* SQL Analyze(421, 1) */ /* SQL Analyze(420, 1) */ /* SQL Analyze(1179, 1) */ /* SQL Analyze(48, 1) */ /* SQL Analyze(826, 1) */ /* SQL Analyze(395, 1) */ /* SQL Analyze(407, 1) */ /* SQL Analyze(448, 1) */ /* SQL Analyze(27, 1) */ /* SQL Analyze(790, 1) */ /* SQL Analyze(449, 1) */ /* SQL Analyze(54, 1) */ /* SQL Analyze(433, 1) */ /* SQL Analyze(1167, 1) */ /* SQL Analyze(1182, 1) */ /* SQL Analyze(451, 1) */ /* SQL Analyze(33, 1) */ /* SQL Analyze(395, 1) */ /* SQL Analyze(1196, 1) */ /* SQL Analyze(18, 1) */ /* SQL Analyze(789, 1) */ /* SQL Analyze(392, 1) */ /* SQL Analyze(35, 1) */ /* SQL Analyze(454, 1) */ /* SQL Analyze(832, 1) */ /* SQL Analyze(1210, 1) */ /* SQL Analyze(16, 1) */ /* SQL Analyze(27, 1) */ /* SQL Analyze(395, 1) */ /* SQL Analyze(779, 1) */ /* SQL Analyze(403, 1) */ /* SQL Analyze(1161, 1) */ /* SQL Analyze(1224, 1) */ /* SQL Analyze(429, 1) */ /* SQL Analyze(790, 1) */ /* SQL Analyze(66, 1) */ /* SQL Analyze(449, 1) */ /* SQL Analyze(49, 1) */ /* SQL Analyze(817, 1) */ /* SQL Analyze(405, 1) */ /* SQL Analyze(386, 1) */ /* SQL Analyze(1186, 1) */ /* SQL Analyze(1222, 1) */ /* SQL Analyze(29, 1) */ /* SQL Analyze(784, 1) */ /* SQL Analyze(69, 1) */ /* SQL Analyze(18, 1) */ /* SQL Analyze(816, 1) */ /* SQL Analyze(1202, 1) */ /* SQL Analyze(812, 1) */ /* SQL Analyze(449, 1) */ /* SQL Analyze(34, 1) */ /* SQL Analyze(21, 1) */ /* SQL Analyze(440, 1) */ /* SQL Analyze(833, 1) */ /* SQL Analyze(420, 1) */ /* SQL Analyze(428, 1) */ /* SQL Analyze(1179, 1) */ /* SQL Analyze(810, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(407, 1) */ /* SQL Analyze(806, 1) */ /* SQL Analyze(25, 1) */ /* SQL Analyze(809, 1) */ /* SQL Analyze(411, 1) */ /* SQL Analyze(428, 1) */ /* SQL Analyze(389, 1) */ /* SQL Analyze(35, 1) */ /* SQL Analyze(35, 1) */ /* SQL Analyze(392, 1) */ /* SQL Analyze(25, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(841, 1) */ /* SQL Analyze(453, 1) */ /* SQL Analyze(89, 1) */ /* SQL Analyze(446, 1) */ /* SQL Analyze(442, 1) */ /* SQL Analyze(435, 1) */ /* SQL Analyze(1166, 1) */ /* SQL Analyze(451, 1) */ /* SQL Analyze(803, 1) */ /* SQL Analyze(1231, 1) */ /* SQL Analyze(454, 1) */ /* SQL Analyze(454, 1) */ /* SQL Analyze(1161, 1) */ /* SQL Analyze(854, 1) */ /* SQL Analyze(1236, 1) */ /* SQL Analyze(1168, 1) */ /* SQL Analyze(806, 1) */ /* SQL Analyze(788, 1) */ /* SQL Analyze(24, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(1170, 1) */ /* SQL Analyze(1162, 1) */ /* SQL Analyze(1178, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(12, 1) */ /* SQL Analyze(11, 1) */ /* SQL Analyze(1152, 1) */ /* SQL Analyze(1157, 1) */ /* SQL Analyze(586, 1) */ /* SQL Analyze(986, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(769, 1) */ /* SQL Analyze(790, 1) */ /* SQL Analyze(1351, 1) */ /* SQL Analyze(1355, 1) */ /* SQL Analyze(771, 1) */ /* SQL Analyze(601, 1) */ /* SQL Analyze(772, 1) */ /* SQL Analyze(393, 1) */ /* SQL Analyze(211, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(229, 1) */ /* SQL Analyze(14, 1) */ /* SQL Analyze(970, 1) */ /* SQL Analyze(9, 1) */ /* SQL Analyze(201, 1) */ /* SQL Analyze(29, 1) */ /* SQL Analyze(775, 1) */ /* SQL Analyze(592, 1) */ /* SQL Analyze(389, 1) */ /* SQL Analyze(1180, 1) */ /* SQL Analyze(1369, 1) */ /* SQL Analyze(1358, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(17, 1) */ /* SQL Analyze(1357, 1) */ /* SQL Analyze(219, 1) */ /* SQL Analyze(598, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(410, 1) */ /* SQL Analyze(777, 1) */ /* SQL Analyze(1170, 1) */ /* SQL Analyze(973, 1) */ /* SQL Analyze(975, 1) */ /* SQL Analyze(980, 1) */ /* SQL Analyze(1370, 1) */ /* SQL Analyze(1345, 1) */ /* SQL Analyze(797, 1) */ /* SQL Analyze(1357, 1) */ /* SQL Analyze(984, 1) */ /* SQL Analyze(977, 1) */ /* SQL Analyze(200, 1) */ /* SQL Analyze(1174, 1) */ /* SQL Analyze(390, 1) */ /* SQL Analyze(19, 1) */ /* SQL Analyze(795, 1) */ /* SQL Analyze(410, 1) */ /* SQL Analyze(590, 1) */ /* SQL Analyze(771, 1) */ /* SQL Analyze(15, 1) * / /* SQL Analyze(595, 1) */ /* SQL Analyze(385, 1) */ /* SQL Analyze(1352, 1) */ /* SQL Analyze(585, 1) */ /* SQL Analyze(776, 1) */ /* SQL Analyze(36, 1) */ /* SQL Analyze(198, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(212, 1) */ /* SQL Analyze(16, 1) */ /* SQL Analyze(599, 1) */ /* SQL Analyze(194, 1) */ /* SQL Analyze(1348, 1) */ /* SQL Analyze(221, 1) */ /* SQL Analyze(390, 1) */ /* SQL Analyze(31, 1) */ /* SQL Analyze(30, 1) */ /* SQL Analyze(776, 1) */ SELECT fo.DAYDATE, round(sum(timeDur)) AS timeDur, COUNT(CATEGORY_SUB_TYPE) AS Total_mand FROM ( SELECT DISTINCT REFERENCE_NO, DAYDATE, CATEGORY, CATEGORY_TYPE, CATEGORY_SUB_TYPE, ((TO_DATE(End_Time, 'HH24:MI:SS')-TO_DATE(Start_Time, 'HH24:MI:SS'))*24*60*60)AS timeDur FROM ( SELECT REFERENCE_NO, CATEGORY, CATEGORY_TYPE, CATEGORY_SUB_TYPE, TO_CHAR(CURRENT_DT, 'dd-mm-yyyy') AS DAYDATE, (SELECT TO_CHAR(MIN(fa.CURRENT_DT), 'HH24:MI:SS') FROM FLX_HEALTH_AUDIT fa WHERE fa.CATEGORY=:1 AND fa.CATEGORY_TYPE=:2 AND CATEGORY_SUB_TYPE=:3 AND fa.REFERENCE_NO=fh.REFERENCE_NO) AS Start_Time, (SELECT TO_CHAR(MAX(fb.CURRENT_DT), 'HH24:MI:SS') FROM FLX_HEALTH_AUDIT fb WHERE fb.CATEGORY=:4 AND fb.CATEGORY_TYPE=:5 AND CATEGORY_SUB_TYPE=:6 AND fb.REFERENCE_NO=fh.REFERENCE_NO) AS End_Time FROM FLX_HEALTH_AUDIT fh WHERE CATEGORY=:7 AND CATEGORY_TYPE=:8 AND CATEGORY_SUB_TYPE=:9 ) fi ) fo WHERE fo.CATEGORY=:10 AND fo.CATEGORY_TYPE=:11 AND fo.CATEGORY_SUB_TYPE=:12 AND TO_DATE(fo.DAYDATE, 'dd-MM-yyyy') BETWEEN TO_DATE(:13, 'dd-MM-yyyy') AND TO_DATE(:14, 'dd-MM-yyyy') GROUP BY fo.DAYDATE, fo.CATEGORY, fo.CATEGORY_TYPE, fo.CATEGORY_SUB_TYPE fvr1gxctzzr3n update sys.scheduler$_job set last_end_date = :1, retry_count = :2, run_count = :3, running_instance = :4, running_slave = :5, job_status = :6 where obj# = :7 g7xwbdngv8f1z /* SQL Analyze(421, 1) */ /* SQL Analyze(420, 1) */ /* SQL Analyze(407, 1) */ /* SQL Analyze(63, 1) */ /* SQL Analyze(817, 1) */ /* SQL Analyze(448, 1) */ /* SQL Analyze(27, 1) */ /* SQL Analyze(34, 1) */ /* SQL Analyze(1193, 1) */ /* SQL Analyze(1201, 1) */ /* SQL Analyze(1219, 1) */ /* SQL Analyze(790, 1) */ /* SQL Analyze(449, 1) */ /* SQL Analyze(54, 1) */ /* SQL Analyze(33, 1) */ /* SQL Analyze(395, 1) */ /* SQL Analyze(1196, 1) */ /* SQL Analyze(18, 1) */ /* SQL Analyze(789, 1) */ /* SQL Analyze(392, 1) */ /* SQL Analyze(35, 1) */ /* SQL Analyze(454, 1) */ /* SQL Analyze(832, 1) */ /* SQL Analyze(1210, 1) */ /* SQL Analyze(16, 1) */ /* SQL Analyze(27, 1) */ /* SQL Analyze(395, 1) */ /* SQL Analyze(779, 1) */ /* SQL Analyze(403, 1) */ /* SQL Analyze(1161, 1) */ /* SQL Analyze(1224, 1) */ /* SQL Analyze(429, 1) */ /* SQL Analyze(790, 1) */ /* SQL Analyze(66, 1) */ /* SQL Analyze(449, 1) */ /* SQL Analyze(49, 1) */ /* SQL Analyze(817, 1) */ /* SQL Analyze(405, 1) */ /* SQL Analyze(386, 1) */ /* SQL Analyze(1186, 1) */ /* SQL Analyze(1222, 1) */ /* SQL Analyze(29, 1) */ /* SQL Analyze(784, 1) */ /* SQL Analyze(69, 1) */ /* SQL Analyze(18, 1) */ /* SQL Analyze(816, 1) */ /* SQL Analyze(1202, 1) */ /* SQL Analyze(812, 1) */ /* SQL Analyze(449, 1) */ /* SQL Analyze(34, 1) */ /* SQL Analyze(21, 1) */ /* SQL Analyze(440, 1) */ /* SQL Analyze(833, 1) */ /* SQL Analyze(420, 1) */ /* SQL Analyze(428, 1) */ /* SQL Analyze(1179, 1) */ /* SQL Analyze(810, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(407, 1) */ /* SQL Analyze(806, 1) */ /* SQL Analyze(25, 1) */ /* SQL Analyze(809, 1) */ /* SQL Analyze(411, 1) */ /* SQL Analyze(428, 1) */ /* SQL Analyze(389, 1) */ /* SQL Analyze(35, 1) */ /* SQL Analyze(35, 1) */ /* SQL Analyze(392, 1) */ /* SQL Analyze(25, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(841, 1) */ /* SQL Analyze(453, 1) */ /* SQL Analyze(89, 1) */ /* SQL Analyze(446, 1) */ /* SQL Analyze(442, 1) */ /* SQL Analyze(435, 1) */ /* SQL Analyze(1166, 1) */ /* SQL Analyze(451, 1) */ /* SQL Analyze(803, 1) */ /* SQL Analyze(1231, 1) */ /* SQL Analyze(454, 1) */ /* SQL Analyze(454, 1) */ /* SQL Analyze(1161, 1) */ /* SQL Analyze(854, 1) */ /* SQL Analyze(1236, 1) */ /* SQL Analyze(1168, 1) */ /* SQL Analyze(806, 1) */ /* SQL Analyze(788, 1) */ /* SQL Analyze(24, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(1170, 1) */ /* SQL Analyze(1162, 1) */ /* SQL Analyze(1178, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(12, 1) */ /* SQL Analyze(11, 1) */ /* SQL Analyze(1152, 1) */ /* SQL Analyze(1157, 1) */ /* SQL Analyze(586, 1) */ /* SQL Analyze(986, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(769, 1) */ /* SQL Analyze(790, 1) */ /* SQL Analyze(1351, 1) */ /* SQL Analyze(1355, 1) */ /* SQL Analyze(771, 1) */ /* SQL Analyze(601, 1) */ /* SQL Analyze(772, 1) */ /* SQL Analyze(393, 1) */ /* SQL Analyze(211, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(229, 1) */ /* SQL Analyze(14, 1) */ /* SQL Analyze(970, 1) */ /* SQL Analyze(9, 1) */ /* SQL Analyze(201, 1) */ /* SQL Analyze(29, 1) */ /* SQL Analyze(775, 1) */ /* SQL Analyze(592, 1) */ /* SQL Analyze(389, 1) */ /* SQL Analyze(1180, 1) */ /* SQL Analyze(1369, 1) */ /* SQL Analyze(1358, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(17, 1) */ /* SQL Analyze(1357, 1) */ /* SQL Analyze(219, 1) */ /* SQL Analyze(598, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(785, 1) */ /* SQL Analyze(410, 1) */ /* SQL Analyze(777, 1) */ /* SQL Analyze(1170, 1) */ /* SQL Analyze(973, 1) */ /* SQL Analyze(975, 1) */ /* SQL Analyze(980, 1) */ /* SQL Analyze(1370, 1) */ /* SQL Analyze(1345, 1) */ /* SQL Analyze(797, 1) */ /* SQL Analyze(1357, 1) */ /* SQL Analyze(984, 1) */ /* SQL Analyze(977, 1) */ /* SQL Analyze(200, 1) */ /* SQL Analyze(1174, 1) */ /* SQL Analyze(390, 1) */ /* SQL Analyze(19, 1) */ /* SQL Analyze(795, 1) */ /* SQL Analyze(410, 1) */ /* SQL Analyze(590, 1) */ /* SQL Analyze(771, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(595, 1) */ /* SQL Analyze(385, 1) */ /* SQL Analyze(1352, 1) */ /* SQL Analyze(585, 1) */ /* SQL Analyze(776, 1) */ /* SQL Analyze(36, 1) */ /* SQL Analyze(198, 1) */ /* SQL Analyze(15, 1) */ /* SQL Analyze(212, 1) */ /* SQL Analyze(16, 1) */ /* SQL Analyze(599, 1) */ /* SQL Analyze(194, 1) */ /* SQL Analyze(1348, 1) */ /* SQL Analyze(221, 1) */ /* SQL Analyze(390, 1) */ /* SQL Analyze(31, 1) */ /* SQL Analyze(30, 1) */ /* SQL Analyze(776, 1) */ SELECT fo.DAYDATE, round(sum(timeDur)) AS timeDur, COUNT(CATEGORY_SUB_TYPE) AS Total_mand FROM ( SELECT DISTINCT REFERENCE_NO, DAYDATE, CATEGORY, CATEGORY_TYPE, CATEGORY_SUB_TYPE, ((TO_DATE(End_Time, 'HH24:MI:SS')-TO_DATE(Start_Time, 'HH24:MI:SS'))*24*60*60)AS timeDur FROM ( SELECT REFERENCE_NO, CATEGORY, CATEGORY_TYPE, CATEGORY_SUB_TYPE, TO_CHAR(CURRENT_DT, 'dd-mm-yyyy') AS DAYDATE, (SELECT TO_CHAR(MIN(fa.CURRENT_DT), 'HH24:MI:SS') FROM FLX_HEALTH_AUDIT fa WHERE fa.CATEGORY=:1 AND fa.CATEGORY_TYPE=:2 AND CATEGORY_SUB_TYPE=:3 AND fa.REFERENCE_NO=fh.REFERENCE_NO) AS Start_Time, (SELECT TO_CHAR(MAX(fb.CURRENT_DT), 'HH24:MI:SS') FROM FLX_HEALTH_AUDIT fb WHERE fb.CATEGORY=:4 AND fb.CATEGORY_TYPE=:5 AND CATEGORY_SUB_TYPE=:6 AND fb.REFERENCE_NO=fh.REFERENCE_NO) AS End_Time FROM FLX_HEALTH_AUDIT fh WHERE CATEGORY=:7 AND CATEGORY_TYPE=:8 AND CATEGORY_SUB_TYPE=:9 ) fi ) fo WHERE fo.CATEGORY=:10 AND fo.CATEGORY_TYPE=:11 AND fo.CATEGORY_SUB_TYPE=:12 AND TO_DATE(fo.DAYDATE, 'dd-MM-yyyy') BETWEEN TO_DATE(:13, 'dd-MM-yyyy') AND TO_DATE(:14, 'dd-MM-yyyy') GROUP BY fo.DAYDATE, fo.CATEGORY, fo.CATEGORY_TYPE, fo.CATEGORY_SUB_TYPE gdn3ysuyssf82 SELECT advisor_id FROM sys.wri$_adv_tasks WHERE ID = :1 gfdn12rn0fg3m SELECT TARGET_GUID FROM MGMT_TARGETS WHERE TARGET_NAME = :B2 AND TARGET_TYPE = :B1 gjm43un5cy843 SELECT SUM(USED), SUM(TOTAL) FROM (SELECT /*+ ORDERED */ SUM(D.BYTES)/(1024*1024)-MAX(S.BYTES) USED, SUM(D.BYTES)/(1024*1024) TOTAL FROM (SELECT TABLESPACE_NAME, SUM(BYTES)/(1024*1024) BYTES FROM (SELECT /*+ ORDERED USE_NL(obj tab) */ DISTINCT TS.NAME FROM SYS.OBJ$ OBJ, SYS.TAB$ TAB, SYS.TS$ TS WHERE OBJ.OWNER# = USERENV('SCHEMAID') AND OBJ.OBJ# = TAB.OBJ# AND TAB.TS# = TS.TS# AND BITAND(TAB.PROPERTY, 1) = 0 AND BITAND(TAB.PROPERTY, 4194400) = 0) TN, DBA_FREE_SPACE SP WHERE SP.TABLESPACE_NAME = TN.NAME GROUP BY SP.TABLESPACE_NAME) S, DBA_DATA_FILES D WHERE D.TABLESPACE_NAME = S.TABLESPACE_NAME GROUP BY D.TABLESPACE_NAME) Back to SQL Statistics Back to Top Instance Activity Statistics Instance Activity Stats Instance Activity Stats - Absolute Values Instance Activity Stats - Thread Activity Back to Top Instance Activity Stats Ordered by statistic name Statistic Total per Second per Trans Batched IO (bound) vector count 0 0.00 0.00 Batched IO (full) vector count 0 0.00 0.00 Batched IO block miss count 0 0.00 0.00 Batched IO buffer defrag count 0 0.00 0.00 Batched IO double miss count 0 0.00 0.00 Batched IO same unit count 0 0.00 0.00 Batched IO single block count 0 0.00 0.00 Batched IO slow jump count 0 0.00 0.00 Batched IO vector block count 0 0.00 0.00 Batched IO vector read count 0 0.00 0.00 Block Cleanout Optim referenced 3 0.00 0.01 CCursor + sql area evicted 1 0.00 0.00 CPU used by this session 181,965 50.44 460.67 CPU used when call started 1,033 0.29 2.62 CR blocks created 99 0.03 0.25 Cached Commit SCN referenced 410 0.11 1.04 Commit SCN cached 1 0.00 0.00 DB time 950,843 263.57 2,407.20 DBWR checkpoint buffers written 7,504 2.08 19.00 DBWR checkpoints 12 0.00 0.03 DBWR object drop buffers written 542 0.15 1.37 DBWR revisited being-written buffer 0 0.00 0.00 DBWR tablespace checkpoint buffers written 0 0.00 0.00 DBWR thread checkpoint buffers written 2,904 0.80 7.35 DBWR transaction table writes 111 0.03 0.28 DBWR undo block writes 5,176 1.43 13.10 Effective IO time 134,133,164 37,180.66 339,577.63 HSC Heap Segment Block Changes 8,814 2.44 22.31 HSC IDL Compressed Blocks 1,111 0.31 2.81 Heap Segment Array Inserts 190 0.05 0.48 Heap Segment Array Updates 250 0.07 0.63 IMU CR rollbacks 100 0.03 0.25 IMU Flushes 157 0.04 0.40 IMU Redo allocation size 272,760 75.61 690.53 IMU commits 350 0.10 0.89 IMU contention 0 0.00 0.00 IMU ktichg flush 0 0.00 0.00 IMU pool not allocated 0 0.00 0.00 IMU recursive-transaction flush 0 0.00 0.00 IMU undo allocation size 1,696,688 470.31 4,295.41 IMU- failed to get a private strand 0 0.00 0.00 LOB table id lookup cache misses 0 0.00 0.00 Misses for writing mapping 0 0.00 0.00 Number of read IOs issued 231,624 64.20 586.39 Requests to/from client 9,841 2.73 24.91 RowCR - row contention 0 0.00 0.00 RowCR attempts 121 0.03 0.31 RowCR hits 121 0.03 0.31 SMON posted for dropping temp segment 0 0.00 0.00 SMON posted for undo segment recovery 0 0.00 0.00 SMON posted for undo segment shrink 1 0.00 0.00 SQL*Net roundtrips to/from client 9,885 2.74 25.03 active txn count during cleanout 76 0.02 0.19 application wait time 2 0.00 0.01 auto extends on undo tablespace 0 0.00 0.00 background checkpoints completed 4 0.00 0.01 background checkpoints started 2 0.00 0.01 background timeouts 17,222 4.77 43.60 branch node splits 0 0.00 0.00 buffer is not pinned count 66,261 18.37 167.75 buffer is pinned count 40,597 11.25 102.78 bytes received via SQL*Net from client 3,537,744 980.63 8,956.31 bytes sent via SQL*Net to client 5,199,946 1,441.38 13,164.42 calls to get snapshot scn: kcmgss 284,222 78.78 719.55 calls to kcmgas 9,411 2.61 23.83 calls to kcmgcs 184,954 51.27 468.24 cell physical IO interconnect bytes 6,472,604,672 1,794,155.09 16,386,340.94 change write time 280 0.08 0.71 cleanout - number of ktugct calls 90 0.02 0.23 cleanouts and rollbacks - consistent read gets 0 0.00 0.00 cleanouts only - consistent read gets 11 0.00 0.03 cluster key scan block gets 2,873 0.80 7.27 cluster key scans 2,453 0.68 6.21 commit batch/immediate performed 68 0.02 0.17 commit batch/immediate requested 68 0.02 0.17 commit cleanout failures: block lost 6 0.00 0.02 commit cleanout failures: buffer being written 0 0.00 0.00 commit cleanout failures: callback failure 13 0.00 0.03 commit cleanout failures: cannot pin 6 0.00 0.02 commit cleanouts 8,483 2.35 21.48 commit cleanouts successfully completed 8,458 2.34 21.41 commit immediate performed 68 0.02 0.17 commit immediate requested 68 0.02 0.17 commit txn count during cleanout 73 0.02 0.18 concurrency wait time 110 0.03 0.28 consistent changes 258 0.07 0.65 consistent gets 180,060,449 49,911.34 455,849.24 consistent gets - examination 33,347 9.24 84.42 consistent gets direct 231,662 64.21 586.49 consistent gets from cache 179,828,778 49,847.12 455,262.73 consistent gets from cache (fastpath) 179,619,594 49,789.14 454,733.15 cursor authentications 68 0.02 0.17 data blocks consistent reads - undo records applied 197 0.05 0.50 db block changes 527,622 146.25 1,335.75 db block gets 730,422 202.47 1,849.17 db block gets direct 232,380 64.41 588.30 db block gets from cache 498,041 138.05 1,260.86 db block gets from cache (fastpath) 197,517 54.75 500.04 deferred (CURRENT) block cleanout applications 4,413 1.22 11.17 dirty buffers inspected 0 0.00 0.00 drop segment calls in space pressure 0 0.00 0.00 enqueue conversions 2,106 0.58 5.33 enqueue releases 277,244 76.85 701.88 enqueue requests 277,258 76.85 701.92 enqueue timeouts 2 0.00 0.01 enqueue waits 20 0.01 0.05 exchange deadlocks 0 0.00 0.00 execute count 34,424 9.54 87.15 failed probes on index block reclamation 0 0.00 0.00 file io service time 0 0.00 0.00 file io wait time 183,080,425 50,748.45 463,494.75 free buffer inspected 457,768 126.89 1,158.91 free buffer requested 297,791 82.55 753.90 global undo segment hints helped 0 0.00 0.00 global undo segment hints were stale 0 0.00 0.00 heap block compress 48 0.01 0.12 hot buffers moved to head of LRU 57 0.02 0.14 immediate (CR) block cleanout applications 11 0.00 0.03 immediate (CURRENT) block cleanout applications 693 0.19 1.75 in call idle wait time 7,463,678 2,068.87 18,895.39 index crx upgrade (positioned) 298 0.08 0.75 index crx upgrade (prefetch) 1 0.00 0.00 index fast full scans (full) 17 0.00 0.04 index fetch by key 12,355 3.42 31.28 index scans kdiixs1 43,464 12.05 110.04 leaf node 90-10 splits 23 0.01 0.06 leaf node splits 33 0.01 0.08 lob reads 10 0.00 0.03 lob writes 41,054 11.38 103.93 lob writes unaligned 41,050 11.38 103.92 local undo segment hints helped 0 0.00 0.00 local undo segment hints were stale 0 0.00 0.00 logical read bytes from cache 1,477,237,022,720 409,478,480.39 3,739,840,563.85 logons cumulative 2,950 0.82 7.47 max cf enq hold time 0 0.00 0.00 messages received 7,698 2.13 19.49 messages sent 7,698 2.13 19.49 min active SCN optimization applied on CR 0 0.00 0.00 no buffer to keep pinned count 4 0.00 0.01 no work - consistent read gets 179,648,660 49,797.20 454,806.73 non-idle wait count 491,135 136.14 1,243.38 non-idle wait time 34,861 9.66 88.26 opened cursors cumulative 36,204 10.04 91.66 parse count (describe) 20 0.01 0.05 parse count (failures) 36 0.01 0.09 parse count (hard) 148 0.04 0.37 parse count (total) 25,660 7.11 64.96 parse time cpu 107 0.03 0.27 parse time elapsed 174 0.05 0.44 physical read IO requests 407,127 112.85 1,030.70 physical read bytes 4,312,883,200 1,195,497.29 10,918,691.65 physical read total IO requests 410,337 113.74 1,038.83 physical read total bytes 4,364,978,176 1,209,937.61 11,050,577.66 physical read total multi block requests 973 0.27 2.46 physical reads 526,476 145.94 1,332.85 physical reads cache 294,631 81.67 745.90 physical reads cache prefetch 119,348 33.08 302.15 physical reads direct 231,844 64.27 586.95 physical reads direct (lob) 231,640 64.21 586.43 physical reads direct temporary tablespace 0 0.00 0.00 physical reads prefetch warmup 0 0.00 0.00 physical write IO requests 233,690 64.78 591.62 physical write bytes 1,971,322,880 546,435.19 4,990,690.84 physical write total IO requests 244,217 67.70 618.27 physical write total bytes 2,107,642,880 584,222.02 5,335,804.76 physical write total multi block requests 376 0.10 0.95 physical writes 240,640 66.70 609.22 physical writes direct 232,584 64.47 588.82 physical writes direct (lob) 231,644 64.21 586.44 physical writes direct temporary tablespace 0 0.00 0.00 physical writes from cache 8,056 2.23 20.39 physical writes non checkpoint 238,376 66.08 603.48 pinned buffers inspected 51 0.01 0.13 prefetch clients - default 16 0.00 0.04 prefetch warmup blocks aged out before use 0 0.00 0.00 prefetched blocks aged out before use 0 0.00 0.00 process last non-idle time 3,602 1.00 9.12 recursive aborts on index block reclamation 0 0.00 0.00 recursive calls 415,328 115.13 1,051.46 recursive cpu usage 364,500 101.04 922.78 redo blocks checksummed by FG (exclusive) 3,739 1.04 9.47 redo blocks written 134,086 37.17 339.46 redo buffer allocation retries 2 0.00 0.01 redo entries 502,406 139.26 1,271.91 redo log space requests 3 0.00 0.01 redo log space wait time 5 0.00 0.01 redo ordering marks 538 0.15 1.36 redo size 64,501,024 17,879.18 163,293.73 redo size for direct writes 12,026,920 3,333.77 30,447.90 redo subscn max counts 550 0.15 1.39 redo synch long waits 0 0.00 0.00 redo synch time 1 0.00 0.00 redo synch time (usec) 1,897,971 526.10 4,804.99 redo synch writes 5,519 1.53 13.97 redo wastage 1,410,908 391.09 3,571.92 redo write time 369 0.10 0.93 redo writes 6,355 1.76 16.09 rollback changes - undo records applied 60 0.02 0.15 rollbacks only - consistent read gets 99 0.03 0.25 rows fetched via callback 3,928 1.09 9.94 scheduler wait time 0 0.00 0.00 session connect time 0 0.00 0.00 session cursor cache hits 13,052 3.62 33.04 session logical reads 180,791,407 50,113.96 457,699.76 shared hash latch upgrades - no wait 2,458 0.68 6.22 shared hash latch upgrades - wait 0 0.00 0.00 sorts (disk) 0 0.00 0.00 sorts (memory) 28,062 7.78 71.04 sorts (rows) 83,241 23.07 210.74 space was found by tune down 0 0.00 0.00 space was not found by tune down 0 0.00 0.00 sql area evicted 1 0.00 0.00 sql area purged 36 0.01 0.09 steps of tune down ret. in space pressure 0 0.00 0.00 summed dirty queue length 0 0.00 0.00 switch current to new buffer 408 0.11 1.03 table fetch by rowid 20,094 5.57 50.87 table fetch continued row 7 0.00 0.02 table scan blocks gotten 179,566,832 49,774.51 454,599.57 table scan rows gotten 13,738,773,487 3,808,279.92 34,781,705.03 table scans (direct read) 0 0.00 0.00 table scans (long tables) 4,540 1.26 11.49 table scans (short tables) 7,456 2.07 18.88 temp space allocated (bytes) 0 0.00 0.00 total cf enq hold time 654 0.18 1.66 total number of cf enq holders 58 0.02 0.15 total number of times SMON posted 6 0.00 0.02 transaction rollbacks 61 0.02 0.15 transaction tables consistent read rollbacks 0 0.00 0.00 transaction tables consistent reads - undo records applied 0 0.00 0.00 tune down retentions in space pressure 0 0.00 0.00 undo change vector size 17,802,644 4,934.75 45,069.98 user I/O wait time 33,479 9.28 84.76 user calls 16,616 4.61 42.07 user commits 395 0.11 1.00 user rollbacks 0 0.00 0.00 workarea executions - onepass 0 0.00 0.00 workarea executions - optimal 16,820 4.66 42.58 write clones created in background 0 0.00 0.00 write clones created in foreground 0 0.00 0.00 Back to Instance Activity Statistics Back to Top Instance Activity Stats - Absolute Values Statistics with absolute values (should not be diffed) Statistic Begin Value End Value session uga memory 846,925,316,258,904 847,226,111,970,432 opened cursors current 204 209 workarea memory allocated 92,554 90,184 logons current 163 184 session uga memory max 6,669,825,291,848 6,670,688,241,008 session pga memory 479,240,720,736 479,405,114,224 session pga memory max 539,088,724,784 539,279,267,136 session cursor cache count 173,545,672 173,569,480 Back to Instance Activity Statistics Back to Top Instance Activity Stats - Thread Activity Statistics identified by '(derived)' come from sources other than SYSSTAT Statistic Total per Hour log switches (derived) 2 2.00 Back to Instance Activity Statistics Back to Top IO Stats IOStat by Function summary IOStat by Filetype summary IOStat by Function/Filetype summary Tablespace IO Stats File IO Stats Back to Top IOStat by Function summary 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000 ordered by (Data Read + Write) desc Function Name Reads: Data Reqs per sec Data per sec Writes: Data Reqs per sec Data per sec Waits: Count Avg Tm(ms) Direct Reads 1.7G 62.75 .490352 1G 37.35 .293823 0 Buffer Cache Reads 2.2G 47.44 .628671 0M 0.00 0M 171.2K 1.03 Others 48M 0.87 .013305 719M 24.35 .199301 4490 1.42 LGWR 1M 0.01 .000277 63M 1.79 .017463 6426 0.59 DBWR 0M 0.00 0M 63M 0.67 .017463 0 Direct Writes 0M 0.00 0M 57M 2.02 .015799 0 TOTAL: 4G 111.08 1.13260 1.9G 66.18 .543850 182.1K 1.03 Back to IO Stats Back to Top IOStat by Filetype summary 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000 Small Read and Large Read are average service times, in milliseconds Ordered by (Data Read + Write) desc Filetype Name Reads: Data Reqs per sec Data per sec Writes: Data Reqs per sec Data per sec Small Read Large Read Data File 3.9G 110.15 1.11985 1.8G 63.22 .510033 0.77 8.52 Control File 49M 0.87 .013582 65M 1.14 .018017 1.67 Log File 0M 0.00 0M 63M 1.77 .017463 4.00 TOTAL: 4G 111.02 1.13343 1.9G 66.13 .545514 0.78 8.52 Back to IO Stats Back to Top IOStat by Function/Filetype summary 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000 Ordered by (Data Read + Write) desc for each function Function/File Name Reads: Data Reqs per sec Data per sec Writes: Data Reqs per sec Data per sec Waits: Count Avg Tm(ms) Direct Reads 1.7G 62.69 .489798 1G 37.30 .293546 0 Direct Reads (Data File) 1.7G 62.69 .489798 1G 37.30 .293546 0 Buffer Cache Reads 2.2G 47.42 .628394 0M 0.00 0M 171.1K 1.03 Buffer Cache Reads (Data File) 2.2G 47.42 .628394 0M 0.00 0M 171.1K 1.03 Others 48M 0.87 .013305 719M 24.34 .199301 3141 1.74 Others (Data File) 0M 0.01 0M 656M 23.21 .181838 50 7.90 Others (Control File) 48M 0.86 .013305 63M 1.12 .017463 3091 1.64 LGWR 1M 0.01 .000277 64M 1.78 .017740 56 3.27 LGWR (Log File) 0M 0.00 0M 63M 1.77 .017463 8 2.13 LGWR (Control File) 1M 0.01 .000277 1M 0.02 .000277 48 3.46 DBWR 0M 0.00 0M 63M 0.67 .017463 0 DBWR (Data File) 0M 0.00 0M 63M 0.67 .017463 0 Direct Writes 0M 0.00 0M 57M 2.02 .015799 0 Direct Writes (Data File) 0M 0.00 0M 57M 2.02 .015799 0 TOTAL: 4G 111.00 1.13177 1.9G 66.11 .543850 174.3K 1.05 Back to IO Stats Back to Top Tablespace IO Stats ordered by IOs (Reads + Writes) desc Tablespace Reads Av Reads/s Av Rd(ms) Av Blks/Rd Writes Av Writes/s Buffer Waits Av Buf Wt(ms) USERS 405,670 112 0.44 1.29 232,624 64 0 0.00 SYSAUX 2,581 1 1.59 1.00 1,117 0 0 0.00 UNDOTBS1 4 0 0.00 1.00 885 0 2 0.00 SYSTEM 86 0 0.93 1.00 216 0 5 4.00 ASBA_TBLSPC 8 0 0.00 1.00 8 0 0 0.00 Back to IO Stats Back to Top File IO Stats ordered by Tablespace, File Tablespace Filename Reads Av Reads/s Av Rd(ms) Av Blks/Rd Writes Av Writes/s Buffer Waits Av Buf Wt(ms) ASBA_TBLSPC E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\ASBA_TBLSPC_DF_1.DBF 4 0 0.00 1.00 4 0 0 0.00 ASBA_TBLSPC E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\ASBA_TBLSPC_DF_2.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSAUX E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSAUX01.DBF 2,581 1 1.59 1.00 1,117 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM01.DBF 10 0 8.00 1.00 123 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM02.DBF 4 0 0.00 1.00 8 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM03.DBF 4 0 0.00 1.00 5 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM04.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM05.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM06.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM07.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM08.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM09.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM10.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM11.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM12.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM13.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM14.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM15.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM17.DBF 4 0 0.00 1.00 16 0 5 4.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM18.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM19.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\SYSTEM20.DBF 4 0 0.00 1.00 4 0 0 0.00 SYSTEM E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS05.DBF 4 0 0.00 1.00 4 0 0 0.00 UNDOTBS1 E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\UNDOTBS01.DBF 4 0 0.00 1.00 885 0 2 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS01.DBF 129 0 6.82 1.00 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS02.DBF 1,884 1 1.44 2.30 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS03.DBF 4,545 1 1.07 1.70 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS04.DBF 8,042 2 1.09 1.57 6 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS06.DBF 5,936 2 1.01 1.88 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS07.DBF 11,590 3 1.12 1.64 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS08.DBF 18,934 5 1.03 1.70 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS09.DBF 12,681 4 0.94 1.77 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS10.DBF 11,237 3 1.01 1.74 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS11.DBF 14,097 4 0.98 1.57 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS12.DBF 11,896 3 1.06 1.95 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS13.DBF 15,236 4 0.90 1.44 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS14.DBF 9,681 3 0.95 1.52 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS15.DBF 8,094 2 0.92 1.80 4 0 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS16.DBF 38,557 11 0.25 1.16 29,653 8 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS17.DBF 38,973 11 0.21 1.18 29,609 8 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS18.DBF 37,940 11 0.22 1.19 29,619 8 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS19.DBF 34,993 10 0.16 1.06 29,617 8 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS20.DBF 33,796 9 0.17 1.07 29,607 8 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS21.DBF 25,885 7 0.01 1.01 25,358 7 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS22.DBF 27,483 8 0.00 1.01 28,565 8 0 0.00 USERS E:\\ORACLE11G\\ORADATA\\DBS\\SYSTEM\\USERS23.DBF 34,061 9 0.12 1.07 30,538 8 0 0.00 Back to IO Stats Back to Top Buffer Pool Statistics Buffer Pool Statistics Checkpoint Activity Back to Top Buffer Pool Statistics Standard block size Pools D: default, K: keep, R: recycle Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k P Number of Buffers Pool Hit% Buffer Gets Physical Reads Physical Writes Free Buff Wait Writ Comp Wait Buffer Busy Waits D 151,543 100 180,342,330 294,653 8,056 0 0 7 Back to Buffer Pool Statistics Back to Top Checkpoint Activity Total Physical Writes: 240,640 MTTR Writes Log Size Writes Log Ckpt Writes Other Settings Writes Autotune Ckpt Writes Thread Ckpt Writes 0 1,461 0 0 4,600 1,443 Back to Buffer Pool Statistics Back to Top Advisory Statistics Instance Recovery Stats MTTR Advisory Buffer Pool Advisory PGA Aggr Summary PGA Aggr Target Stats PGA Aggr Target Histogram PGA Memory Advisory Shared Pool Advisory SGA Target Advisory Streams Pool Advisory Java Pool Advisory Back to Top Instance Recovery Stats B: Begin Snapshot, E: End Snapshot Targt MTTR (s) Estd MTTR (s) Recovery Estd IOs Actual RedoBlks Target RedoBlks Log Sz RedoBlks Log Ckpt Timeout RedoBlks Log Ckpt Interval RedoBlks Opt Log Sz(M) Estd RAC Avail Time B 0 27 3616 154368 165888 165888 330838 E 0 15 305 2088 7322 165888 7322 Back to Advisory Statistics Back to Top MTTR Advisory No data exists for this section of the report. Back to Advisory Statistics Back to Top Buffer Pool Advisory Only rows with estimated physical reads >0 are displayed ordered by Block Size, Buffers For Estimate P Size for Est (M) Size Factor Buffers (thousands) Est Phys Read Factor Estimated Phys Reads (thousands) Est Phys Read Time Est %DBtime for Rds D 112 0.09 14 1.01 3,101,532 1 272928.00 D 224 0.18 28 1.00 3,094,774 1 266835.00 D 336 0.27 41 1.00 3,088,548 1 261221.00 D 448 0.36 55 1.00 3,086,106 1 259019.00 D 560 0.45 69 1.00 3,085,108 1 258119.00 D 672 0.55 83 1.00 3,084,383 1 257466.00 D 784 0.64 97 1.00 3,083,894 1 257024.00 D 896 0.73 110 1.00 3,083,593 1 256754.00 D 1,008 0.82 124 1.00 3,083,366 1 256549.00 D 1,120 0.91 138 1.00 3,083,165 1 256367.00 D 1,232 1.00 152 1.00 3,082,964 1 256186.00 D 1,344 1.09 166 1.00 3,082,738 1 255983.00 D 1,456 1.18 179 1.00 3,082,495 1 255763.00 D 1,568 1.27 193 1.00 3,082,183 1 255482.00 D 1,680 1.36 207 1.00 3,081,878 1 255207.00 D 1,792 1.45 221 1.00 3,081,604 1 254960.00 D 1,904 1.55 235 1.00 3,081,331 1 254713.00 D 2,016 1.64 248 1.00 3,081,132 1 254535.00 D 2,128 1.73 262 1.00 3,080,942 1 254364.00 D 2,240 1.82 276 1.00 3,072,539 1 246787.00 Back to Advisory Statistics Back to Top PGA Aggr Summary PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory PGA Cache Hit % W/A MB Processed Extra W/A MB Read/Written 100.00 83 0 Back to Advisory Statistics Back to Top PGA Aggr Target Stats B: Begin Snap E: End Snap (rows dentified with B or E contain data which is absolute i.e. not diffed over the interval) Auto PGA Target - actual workarea memory target W/A PGA Used - amount of memory used for all Workareas (manual + auto) %PGA W/A Mem - percentage of PGA memory allocated to workareas %Auto W/A Mem - percentage of workarea memory controlled by Auto Mem Mgmt %Man W/A Mem - percentage of workarea memory under manual control PGA Aggr Target(M) Auto PGA Target(M) PGA Mem Alloc(M) W/A PGA Used(M) %PGA W/A Mem %Auto W/A Mem %Man W/A Mem Global Mem Bound(K) B 750 528 433.14 90.38 20.87 99.43 0.57 102,400 E 750 522 415.47 88.07 21.20 100.00 0.00 102,400 Back to Advisory Statistics Back to Top PGA Aggr Target Histogram Optimal Executions are purely in-memory operations Low Optimal High Optimal Total Execs Optimal Execs 1-Pass Execs M-Pass Execs 2K 4K 16,767 16,767 0 0 64K 128K 10 10 0 0 512K 1024K 40 40 0 0 1M 2M 8 8 0 0 4M 8M 2 2 0 0 Back to Advisory Statistics Back to Top PGA Memory Advisory When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value where Estd PGA Overalloc Count is 0 PGA Target Est (MB) Size Factr W/A MB Processed Estd Extra W/A MB Read/ Written to Disk Estd PGA Cache Hit % Estd PGA Overalloc Count Estd Time 94 0.13 828,577.28 563,905.72 60.00 3,042 27,634,880 188 0.25 828,577.28 550,103.44 60.00 2,466 27,360,964 375 0.50 828,577.28 138,286.75 86.00 1 19,188,149 563 0.75 828,577.28 132,437.62 86.00 0 19,072,069 750 1.00 828,577.28 132,336.03 86.00 0 19,070,053 900 1.20 828,577.28 132,336.03 86.00 0 19,070,053 1,050 1.40 828,577.28 132,336.03 86.00 0 19,070,053 1,200 1.60 828,577.28 132,336.03 86.00 0 19,070,053 1,350 1.80 828,577.28 132,336.03 86.00 0 19,070,053 1,500 2.00 828,577.28 132,336.03 86.00 0 19,070,053 2,250 3.00 828,577.28 132,336.03 86.00 0 19,070,053 3,000 4.00 828,577.28 132,336.03 86.00 0 19,070,053 4,500 6.00 828,577.28 132,336.03 86.00 0 19,070,053 6,000 8.00 828,577.28 132,336.03 86.00 0 19,070,053 Back to Advisory Statistics Back to Top Shared Pool Advisory SP: Shared Pool Est LC: Estimated Library Cache Factr: Factor Note there is often a 1:Many correlation between a single logical object in the Library Cache, and the physical number of memory objects associated with it. Therefore comparing the number of Lib Cache objects (e.g. in v$librarycache), with the number of Lib Cache Memory Objects is invalid. Shared Pool Size(M) SP Size Factr Est LC Size (M) Est LC Mem Obj Est LC Time Saved (s) Est LC Time Saved Factr Est LC Load Time (s) Est LC Load Time Factr Est LC Mem Obj Hits (K) 816 0.46 11 1,627 3,902,215 0.41 5,748,047 248.80 374,076 1,008 0.57 214 8,934 6,765,869 0.70 2,884,393 124.85 660,898 1,200 0.68 406 12,736 7,655,232 0.80 1,995,030 86.35 786,607 1,392 0.78 595 18,537 8,318,581 0.86 1,331,681 57.64 894,132 1,584 0.89 775 23,952 8,980,179 0.93 670,083 29.00 1,001,602 1,616 0.91 804 24,850 9,090,379 0.94 559,883 24.23 1,019,499 1,632 0.92 819 25,402 9,145,397 0.95 504,865 21.85 1,028,446 1,648 0.93 834 25,984 9,199,674 0.96 450,588 19.50 1,037,301 1,664 0.94 850 26,598 9,254,093 0.96 396,169 17.15 1,046,147 1,680 0.95 866 27,212 9,308,273 0.97 341,989 14.80 1,054,990 1,696 0.96 882 27,918 9,362,393 0.97 287,869 12.46 1,063,831 1,712 0.96 898 28,695 9,416,487 0.98 233,775 10.12 1,072,680 1,728 0.97 914 29,255 9,470,581 0.98 179,681 7.78 1,081,446 1,744 0.98 930 29,468 9,522,783 0.99 127,479 5.52 1,089,792 1,760 0.99 946 29,945 9,574,982 0.99 75,280 3.26 1,098,141 1,776 1.00 962 30,698 9,627,159 1.00 23,103 1.00 1,106,496 1,792 1.01 978 30,916 9,627,488 1.00 22,774 0.99 1,106,539 1,808 1.02 993 32,170 9,627,713 1.00 22,549 0.98 1,106,577 1,824 1.03 1,009 33,186 9,627,939 1.00 22,323 0.97 1,106,616 1,840 1.04 1,025 33,806 9,628,416 1.00 21,846 0.95 1,106,691 1,856 1.05 1,041 34,343 9,629,035 1.00 21,227 0.92 1,106,728 1,872 1.05 1,057 34,866 9,629,055 1.00 21,207 0.92 1,106,730 1,888 1.06 1,073 35,657 9,629,070 1.00 21,192 0.92 1,106,731 1,904 1.07 1,089 36,573 9,629,091 1.00 21,171 0.92 1,106,733 1,920 1.08 1,105 37,489 9,629,104 1.00 21,158 0.92 1,106,734 1,968 1.11 1,153 40,237 9,629,134 1.00 21,128 0.91 1,106,737 2,160 1.22 1,345 51,231 9,629,226 1.00 21,036 0.91 1,106,744 2,352 1.32 1,537 62,225 9,629,275 1.00 20,987 0.91 1,106,748 2,544 1.43 1,729 73,219 9,629,309 1.00 20,953 0.91 1,106,750 2,736 1.54 1,921 84,213 9,629,345 1.00 20,917 0.91 1,106,753 2,928 1.65 2,113 95,207 9,629,373 1.00 20,889 0.90 1,106,755 3,120 1.76 2,305 106,201 9,629,422 1.00 20,840 0.90 1,106,758 3,312 1.86 2,497 117,195 9,629,457 1.00 20,805 0.90 1,106,761 3,504 1.97 2,689 128,189 9,629,488 1.00 20,774 0.90 1,106,764 3,696 2.08 2,881 139,183 9,629,515 1.00 20,747 0.90 1,106,766 Back to Advisory Statistics Back to Top SGA Target Advisory SGA Target Size (M) SGA Size Factor Est DB Time (s) Est Physical Reads 1,536 0.50 3,271,420 3,094,679,409 2,304 0.75 1,288,554 3,086,047,109 3,072 1.00 1,284,572 3,082,964,145 3,840 1.25 1,282,902 3,081,114,367 4,608 1.50 1,274,938 3,072,482,067 5,376 1.75 1,274,809 3,072,482,067 6,144 2.00 1,274,681 3,072,482,067 Back to Advisory Statistics Back to Top Streams Pool Advisory No data exists for this section of the report. Back to Advisory Statistics Back to Top Java Pool Advisory No data exists for this section of the report. Back to Advisory Statistics Back to Top Wait Statistics Buffer Wait Statistics Enqueue Activity Back to Top Buffer Wait Statistics ordered by wait time desc, waits desc Class Waits Total Wait Time (s) Avg Time (ms) data block 5 0 4 undo header 2 0 0 Back to Wait Statistics Back to Top Enqueue Activity only enqueues with waits are shown Enqueue stats gathered prior to 10g should not be compared with 10g data ordered by Wait Time desc, Waits desc Enqueue Type (Request Reason) Requests Succ Gets Failed Gets Waits Wt Time (s) Av Wt Time(ms) RO-Multiple Object Reuse (fast object reuse) 100 100 0 10 0 1.60 CR-Reuse Block Range (block range reuse ckpt) 184 184 0 10 0 0.00 Back to Wait Statistics Back to Top Undo Statistics Undo Segment Summary Undo Segment Stats Back to Top Undo Segment Summary Min/Max TR (mins) - Min and Max Tuned Retention (minutes) STO - Snapshot Too Old count, OOS - Out of Space count Undo segment block stats: uS - unexpired Stolen, uR - unexpired Released, uU - unexpired reUsed eS - expired Stolen, eR - expired Released, eU - expired reUsed Undo TS# Num Undo Blocks (K) Number of Transactions Max Qry Len (s) Max Tx Concurcy Min/Max TR (mins) STO/ OOS uS/uR/uU/ eS/eR/eU 2 2.22 6,308 1,312 4 34.3/62 0/0 0/0/0/0/0/0 Back to Undo Statistics Back to Top Undo Segment Stats Most recent 35 Undostat rows, ordered by Time desc End Time Num Undo Blocks Number of Transactions Max Qry Len (s) Max Tx Concy Tun Ret (mins) STO/ OOS uS/uR/uU/ eS/eR/eU 28-Jun 07:29 29 968 419 3 62 0/0 0/0/0/0/0/0 28-Jun 07:19 31 1,010 1,019 4 56 0/0 0/0/0/0/0/0 28-Jun 07:09 28 938 717 1 51 0/0 0/0/0/0/0/0 28-Jun 06:59 44 1,017 1,174 2 46 0/0 0/0/0/0/0/0 28-Jun 06:49 39 1,190 712 3 40 0/0 0/0/0/0/0/0 28-Jun 06:39 2,052 1,185 1,312 3 34 0/0 0/0/0/0/0/0 Back to Undo Statistics Back to Top Latch Statistics Latch Activity Latch Sleep Breakdown Latch Miss Sources Mutex Sleep Summary Parent Latch Statistics Child Latch Statistics Back to Top Latch Activity \"Get Requests\", \"Pct Get Miss\" and \"Avg Slps/Miss\" are statistics for willing-to-wait latch get requests \"NoWait Requests\", \"Pct NoWait Miss\" are for no-wait latch get requests \"Pct Misses\" for both should be very close to 0.0 Latch Name Get Requests Pct Get Miss Avg Slps /Miss Wait Time (s) NoWait Requests Pct NoWait Miss AQ deq hash table latch 1 0.00 0 0 ASM db client latch 2,654 0.00 0 0 ASM map operation hash table 1 0.00 0 0 ASM network state latch 58 0.00 0 0 AWR Alerted Metric Element list 33,550 0.00 0 0 Change Notification Hash table latch 1,197 0.00 0 0 Consistent RBA 6,357 0.00 0 0 DML lock allocation 14,760 0.00 0 0 Event Group Locks 5,831 0.00 0 0 FOB s.o list latch 1,029 0.00 0 0 File State Object Pool Parent Latch 1 0.00 0 0 I/O Staticstics latch 1 0.00 0 0 IPC stats buffer allocation latch 1 0.00 0 0 In memory undo latch 6,049 0.00 0 1,279 0.00 JS Sh mem access 7 0.00 0 0 JS mem alloc latch 18 0.00 0 0 JS queue access latch 19 0.00 0 0 JS queue state obj latch 21,720 0.00 0 0 JS slv state obj latch 251 5.58 0.00 0 0 KFC FX Hash Latch 1 0.00 0 0 KFC Hash Latch 1 0.00 0 0 KFCL LE Freelist 1 0.00 0 0 KGNFS-NFS:SHM structure 1 0.00 0 0 KGNFS-NFS:SVR LIST 1 0.00 0 0 KJC message pool free list 1 0.00 0 0 KJCT flow control latch 1 0.00 0 0 KMG MMAN ready and startup request latch 1,196 0.00 0 0 KTF sga latch 19 0.00 0 958 0.00 KWQMN job cache list latch 1 0.00 0 0 KWQS pqsubs latch 1 0.00 0 0 KWQS pqueue ctx latch 62 0.00 0 0 Locator state objects pool parent latch 1 0.00 0 0 Lsod array latch 1 0.00 0 0 MQL Tracking Latch 0 0 72 0.00 Memory Management Latch 1 0.00 0 1,196 0.00 Memory Queue 1 0.00 0 0 Memory Queue Message Subscriber #1 1 0.00 0 0 Memory Queue Message Subscriber #2 1 0.00 0 0 Memory Queue Message Subscriber #3 1 0.00 0 0 Memory Queue Message Subscriber #4 1 0.00 0 0 Memory Queue Subscriber 1 0.00 0 0 MinActiveScn Latch 40 0.00 0 0 Mutex 1 0.00 0 0 Mutex Stats 1 0.00 0 0 OS process 12,193 0.00 0 0 OS process allocation 13,051 0.09 0.00 0 0 OS process: request allocation 5,739 0.02 0.00 0 0 PL/SQL warning settings 3,171 0.00 0 0 PX hash array latch 1 0.00 0 0 QMT 1 0.00 0 0 Real-time plan statistics latch 4,351 0.00 0 0 SGA IO buffer pool latch 37 0.00 0 42 0.00 SGA blob parent 1 0.00 0 0 SGA bucket locks 1 0.00 0 0 SGA heap locks 1 0.00 0 0 SGA pool locks 1 0.00 0 0 SQL memory manager latch 1 0.00 0 1,195 0.00 SQL memory manager workarea list latch 81,103 0.00 0 0 Shared B-Tree 314 0.00 0 0 Streams Generic 1 0.00 0 0 Testing 1 0.00 0 0 Token Manager 1 0.00 0 0 WCR: sync 1 0.00 0 0 Write State Object Pool Parent Latch 1 0.00 0 0 X$KSFQP 1 0.00 0 0 XDB NFS Security Latch 1 0.00 0 0 XDB unused session pool 1 0.00 0 0 XDB used session pool 1 0.00 0 0 active checkpoint queue latch 2,466 0.00 0 0 active service list 24,217 0.14 0.00 0 5,434 0.00 archive control 124 0.00 0 0 begin backup scn array 231,605 0.00 0 0 buffer pool 1 0.00 0 0 business card 1 0.00 0 0 cache buffer handles 222 0.00 0 0 cache buffers chains 361,805,852 0.00 0.00 0 21,542,686 0.00 cache buffers lru chain 9,177 0.12 0.00 0 201,001,010 0.00 cache table scan latch 54,302 0.00 0 54,302 0.00 call allocation 12,126 0.40 0.67 0 0 cas latch 1 0.00 0 0 change notification client cache latch 1 0.00 0 0 channel handle pool latch 5,794 0.00 0 0 channel operations parent latch 27,183 0.01 0.00 0 0 checkpoint queue latch 121,532 0.00 0 4,657 0.00 client/application info 19,846 0.00 0 0 compile environment latch 2,950 0.00 0 0 corrupted undo seg latch 241 0.00 0 0 cp cmon/server latch 1 0.00 0 0 cp pool latch 1 0.00 0 0 cp server hash latch 1 0.00 0 0 cp sga latch 58 0.00 0 0 cvmap freelist lock 1 0.00 0 0 deferred cleanup latch 58 0.00 0 0 dml lock allocation 63 0.00 0 0 done queue latch 1 0.00 0 0 dummy allocation 5,880 0.32 0.00 0 0 enqueue freelist latch 1 0.00 0 522,008 0.00 enqueue hash chains 557,675 0.00 0.00 0 0 fifth spare latch 1 0.00 0 0 file cache latch 1,164 0.00 0 0 flashback copy 1 0.00 0 0 fourth Audit Vault latch 1 0.00 0 0 gc element 1 0.00 0 0 gcs commit scn state 1 0.00 0 0 gcs opaque info freelist 1 0.00 0 0 gcs partitioned table hash 1 0.00 0 0 gcs pcm hashed value bucket hash 1 0.00 0 0 gcs resource freelist 1 0.00 0 0 gcs resource hash 1 0.00 0 0 gcs resource scan list 1 0.00 0 0 gcs resource validate list 1 0.00 0 0 gcs shadows freelist 1 0.00 0 0 ges domain table 1 0.00 0 0 ges enqueue table freelist 1 0.00 0 0 ges group table 1 0.00 0 0 ges process hash list 1 0.00 0 0 ges process parent latch 1 0.00 0 0 ges resource hash list 1 0.00 0 0 ges resource scan list 1 0.00 0 0 ges resource table freelist 1 0.00 0 0 ges value block free list 1 0.00 0 0 global KZLD latch for mem in SGA 2,733 0.00 0 0 global tx hash mapping 1 0.00 0 0 granule operation 1 0.00 0 0 hash table column usage latch 314 0.00 0 4,892 0.00 hash table modification latch 87 0.00 0 0 heartbeat check 1 0.00 0 0 internal temp table object number allocation latch 18 0.00 0 0 interrupt manipulation 56 0.00 0 0 intra txn parallel recovery 1 0.00 0 0 io pool granule metadata list 1 0.00 0 0 job workq parent latch 69 0.00 0 68 0.00 job_queue_processes free list latch 142 0.00 0 0 job_queue_processes parameter latch 849 0.00 0 0 k2q lock allocation 1 0.00 0 0 kcbtsemkid latch 2 0.00 0 0 kdlx hb parent latch 1 0.00 0 0 kgb parent 1 0.00 0 0 kgnfs mount latch 1 0.00 0 0 kokc descriptor allocation latch 376 0.00 0 0 ksfv messages 1 0.00 0 0 ksim group membership cache 1 0.00 0 0 kss move lock 43 0.00 0 0 ksuosstats global area 362 0.00 0 0 ksv allocation latch 144 0.00 0 0 ksv class latch 89 1.12 0.00 0 0 ksv msg queue latch 1 0.00 0 0 ksz_so allocation latch 5,739 0.14 0.00 0 0 ktm global data 64 0.00 0 0 kwqbsn:qsga 128 0.00 0 0 lgwr LWN SCN 6,833 0.00 0 0 list of block allocation 5,690 0.00 0 0 loader state object freelist 246,200 0.00 0 0 lob segment dispenser latch 1 0.00 0 0 lob segment hash table latch 11 0.00 0 0 lob segment query latch 1 0.00 0 0 lock DBA buffer during media recovery 1 0.00 0 0 logical standby cache 1 0.00 0 0 logminer context allocation 1 0.00 0 0 logminer work area 1 0.00 0 0 longop free list parent 692 0.00 0 11 0.00 mapped buffers lru chain 1 0.00 0 0 message pool operations parent latch 103 0.00 0 0 messages 60,701 0.74 0.00 0 0 mostly latch-free SCN 6,835 0.01 0.00 0 0 msg queue latch 1 0.00 0 0 multiblock read objects 340,757 0.00 0.00 0 0 name-service namespace bucket 1 0.00 0 0 ncodef allocation latch 58 0.00 0 0 object queue header heap 155 0.00 0 126 0.00 object queue header operation 621,209 0.00 0.06 0 0 object stats modification 17 0.00 0 0 parallel query alloc buffer 477 0.00 0 0 parallel query stats 1 0.00 0 0 parameter list 556 0.00 0 0 parameter table management 11,907 0.00 0 0 peshm 1 0.00 0 0 pesom_free_list 1 0.00 0 0 pesom_hash_node 1 0.00 0 0 post/wait queue 6,088 0.57 0.03 0 4,542 0.31 process allocation 5,886 0.24 0.00 0 2,880 0.00 process group creation 5,739 0.00 0 0 process queue 1 0.00 0 0 process queue reference 1 0.00 0 0 qmn task queue latch 521 0.00 0 0 query server freelists 1 0.00 0 0 queued dump request 12 0.00 0 0 queuing load statistics 1 0.00 0 0 recovery domain hash list 1 0.00 0 0 redo allocation 23,422 0.02 0.00 0 503,526 0.00 redo copy 1 0.00 0 503,531 0.01 redo writing 23,962 0.00 0 0 resmgr group change latch 2,931 0.00 0 0 resmgr:active threads 6,672 0.01 0.00 0 1,795 0.00 resmgr:actses change group 2,871 0.00 0 0 resmgr:actses change state 37 0.00 0 0 resmgr:free threads list 5,911 0.49 0.03 0 0 resmgr:plan CPU method 1 0.00 0 0 resmgr:resource group CPU method 202 0.00 0 0 resmgr:schema config 840 0.00 0 60 0.00 resmgr:session queuing 1 0.00 0 0 rm cas latch 1 0.00 0 0 row cache objects 362,432 0.02 0.01 0 0 rules engine aggregate statistics 1 0.00 0 0 rules engine rule set statistics 2 0.00 0 0 second Audit Vault latch 1 0.00 0 0 second spare latch 1 0.00 0 0 sequence cache 11,159 0.00 0 0 session allocation 15,228 0.00 0 9,409 0.01 session idle bit 39,700 0.03 0.00 0 0 session queue latch 1 0.00 0 0 session state list latch 5,962 0.00 0 0 session switching 2,918 0.03 0.00 0 0 session timer 1,197 0.00 0 0 shared pool 221,162 0.68 0.00 0 0 shared pool sim alloc 1 0.00 0 0 shared pool simulator 249 0.00 0 0 sim partition latch 1 0.00 0 0 simulator hash latch 44,881,236 0.00 0.00 0 0 simulator lru latch 6,959 0.62 0.02 0 22,600,880 0.00 sort extent pool 105 0.00 0 0 space background state object latch 12 0.00 0 0 space background task latch 4,996 2.04 0.01 0 2,399 0.00 state object free list 2 0.00 0 0 statistics aggregation 336 0.00 0 0 tablespace key chain 4 0.00 0 0 temp lob duration state obj allocation 4 0.00 0 0 temporary table state object allocation 2 0.00 0 0 test excl. parent l0 1 0.00 0 0 test excl. parent2 l0 1 0.00 0 0 third spare latch 1 0.00 0 0 threshold alerts latch 140 0.00 0 0 transaction allocation 6,430 0.00 0 0 transaction branch allocation 1,197 0.00 0 0 undo global data 23,620 0.00 0 0 virtual circuit buffers 1 0.00 0 0 virtual circuit holder 1 0.00 0 0 virtual circuit queues 1 0.00 0 0 Back to Latch Statistics Back to Top Latch Sleep Breakdown ordered by misses desc Latch Name Get Requests Misses Sleeps Spin Gets shared pool 221,162 1,512 7 1,505 messages 60,701 447 2 445 space background task latch 4,996 102 1 101 row cache objects 362,432 83 1 82 call allocation 12,126 49 33 20 simulator lru latch 6,959 43 1 42 post/wait queue 6,088 35 1 34 resmgr:free threads list 5,911 29 1 28 object queue header operation 621,209 17 1 16 Back to Latch Statistics Back to Top Latch Miss Sources only latches with sleeps are shown ordered by name, sleeps desc Latch Name Where NoWait Misses Sleeps Waiter Sleeps PC and Classifier lists for WLM No latch 0 1 0 cache buffers chains kcbgcur_4 0 1 0 call allocation ksuxds 0 31 28 call allocation ksudlp: top call 0 2 4 messages ksarcv: after wait 0 2 2 object queue header operation kcbo_write_q 0 1 0 post/wait queue ksliwat:remove 0 1 1 resmgr:free threads list kskthrsod 0 1 1 row cache objects kqrpre: find obj 0 1 1 shared pool kghalo 0 6 5 shared pool kghfre 0 1 2 simulator lru latch kcbs_simulate: simulate set 0 1 0 Back to Latch Statistics Back to Top Mutex Sleep Summary ordered by number of sleeps desc Mutex Type Location Sleeps Wait Time (ms) Library Cache kgllkc1 57 11 0 Library Cache kglhdgn2 106 9 0 Back to Latch Statistics Back to Top Parent Latch Statistics No data exists for this section of the report. Back to Latch Statistics Back to Top Child Latch Statistics No data exists for this section of the report. Back to Latch Statistics Back to Top Segment Statistics Segments by Logical Reads Segments by Physical Reads Segments by Physical Read Requests Segments by UnOptimized Reads Segments by Optimized Reads Segments by Direct Physical Reads Segments by Physical Writes Segments by Physical Write Requests Segments by Direct Physical Writes Segments by Table Scans Segments by DB Blocks Changes Segments by Row Lock Waits Segments by ITL Waits Segments by Buffer Busy Waits Back to Top Segments by Logical Reads Total Logical Reads: 180,791,407 Captured Segments account for 100.8% of Total Owner Tablespace Name Object Name Subobject Name Obj. Type Logical Reads %Total FLUXMMS USERS FLX_HEALTH_AUDIT TABLE 180,967,424 100.10 ** MISSING ** USERS ** MISSING: 300590/300590 ** MISSING ** UNDEFINED 588,832 0.33 FLUXMMS USERS SYS_LOB0000300571C00004$$ LOB 205,488 0.11 ** MISSING ** USERS ** MISSING: 300592/300592 ** MISSING ** UNDEFINED 160,880 0.09 SYS SYSTEM I_SYSAUTH1 INDEX 100,592 0.06 Back to Segment Statistics Back to Top Segments by Physical Reads Total Physical Reads: 526,476 Captured Segments account for 103.5% of Total Owner Tablespace Name Object Name Subobject Name Obj. Type Physical Reads %Total FLUXMMS USERS FLX_HEALTH_AUDIT TABLE 288,407 54.78 FLUXMMS USERS SYS_LOB0000300571C00004$$ LOB 207,063 39.33 FLUXMMS USERS SYS_LOB0000300571C00012$$ LOB 43,011 8.17 SYS SYSAUX WRM$_SNAPSHOT_DETAILS_INDEX INDEX 2,350 0.45 ** MISSING ** USERS ** MISSING: 300589/300589 ** MISSING ** UNDEFINED 1,982 0.38 Back to Segment Statistics Back to Top Segments by Physical Read Requests Total Physical Read Requests: 407,127 Captured Segments account for 104.5% of Total Owner Tablespace Name Object Name Subobject Name Obj. Type Phys Read Requests %Total FLUXMMS USERS SYS_LOB0000300571C00004$$ LOB 207,063 50.86 FLUXMMS USERS FLX_HEALTH_AUDIT TABLE 170,895 41.98 FLUXMMS USERS SYS_LOB0000300571C00012$$ LOB 43,011 10.56 SYS SYSAUX WRM$_SNAPSHOT_DETAILS_INDEX INDEX 2,350 0.58 FLUXMMS USERS FPD_DOC TABLE 1,905 0.47 Back to Segment Statistics Back to Top Segments by UnOptimized Reads Total UnOptimized Read Requests: 407,127 Captured Segments account for 104.5% of Total Owner Tablespace Name Object Name Subobject Name Obj. Type UnOptimized Reads %Total FLUXMMS USERS SYS_LOB0000300571C00004$$ LOB 207,063 50.86 FLUXMMS USERS FLX_HEALTH_AUDIT TABLE 170,895 41.98 FLUXMMS USERS SYS_LOB0000300571C00012$$ LOB 43,011 10.56 SYS SYSAUX WRM$_SNAPSHOT_DETAILS_INDEX INDEX 2,350 0.58 FLUXMMS USERS FPD_DOC TABLE 1,905 0.47 Back to Segment Statistics Back to Top Segments by Optimized Reads No data exists for this section of the report. Back to Segment Statistics Back to Top Segments by Direct Physical Reads Total Direct Physical Reads: 231,844 Captured Segments account for 107.9% of Total Owner Tablespace Name Object Name Subobject Name Obj. Type Direct Reads %Total FLUXMMS USERS SYS_LOB0000300571C00004$$ LOB 207,063 89.31 FLUXMMS USERS SYS_LOB0000300571C00012$$ LOB 43,012 18.55 SYS SYSAUX SYS_LOB0000005975C00004$$ LOB 1 0.00 Back to Segment Statistics Back to Top Segments by Physical Writes Total Physical Writes: 240,640 Captured Segments account for 104.8% of Total Owner Tablespace Name Object Name Subobject Name Obj. Type Physical Writes %Total ** MISSING ** USERS ** MISSING: 300590/300590 ** MISSING ** UNDEFINED 207,424 86.20 ** MISSING ** USERS ** MISSING: 300592/300592 ** MISSING ** UNDEFINED 43,015 17.88 ** MISSING ** USERS ** MISSING: 300589/300589 ** MISSING ** UNDEFINED 811 0.34 SYS SYSTEM AUD$ TABLE 181 0.08 SYSMAN SYSAUX MGMT_METRICS_RAW_PK INDEX 169 0.07 Back to Segment Statistics Back to Top Segments by Physical Write Requests Total Physical Write Requestss: 233,690 Captured Segments account for 107.1% of Total Owner Tablespace Name Object Name Subobject Name Obj. Type Phys Write Requests %Total ** MISSING ** USERS ** MISSING: 300590/300590 ** MISSING ** UNDEFINED 206,545 88.38 ** MISSING ** USERS ** MISSING: 300592/300592 ** MISSING ** UNDEFINED 43,096 18.44 SYSMAN SYSAUX MGMT_METRICS_RAW_PK INDEX 140 0.06 SYS SYSAUX WRM$_SNAPSHOT_DETAILS_INDEX INDEX 82 0.04 ** MISSING ** USERS ** MISSING: 300589/300589 ** MISSING ** UNDEFINED 60 0.03 Back to Segment Statistics Back to Top Segments by Direct Physical Writes Total Direct Physical Writes: 232,584 Captured Segments account for 107.9% of Total Owner Tablespace Name Object Name Subobject Name Obj. Type Direct Writes %Total ** MISSING ** USERS ** MISSING: 300590/300590 ** MISSING ** UNDEFINED 207,065 89.03 ** MISSING ** USERS ** MISSING: 300592/300592 ** MISSING ** UNDEFINED 43,012 18.49 ** MISSING ** USERS ** MISSING: 300589/300589 ** MISSING ** UNDEFINED 795 0.34 SYS SYSAUX WRH$_ACTIVE_SESSION_HISTORY WRH$_ACTIVE_4060618396_50929 TABLE PARTITION 11 0.00 SYS SYSAUX SYS_LOB0000005975C00004$$ LOB 2 0.00 Back to Segment Statistics Back to Top Segments by Table Scans Total Table Scans: 4,557 Captured Segments account for 100.6% of Total Owner Tablespace Name Object Name Subobject Name Obj. Type Table Scans %Total FLUXMMS USERS FLX_HEALTH_AUDIT TABLE 4,574 100.37 SYS SYSTEM I_OBJ2 INDEX 6 0.13 SYSMAN SYSAUX MGMT_METRICS_1HOUR_PK INDEX 5 0.11 SYSMAN SYSAUX MGMT_CURRENT_METRICS_PK INDEX 1 0.02 Back to Segment Statistics Back to Top Segments by DB Blocks Changes % of Capture shows % of DB Block Changes for each top segment compared with total DB Block Changes for all segments captured by the Snapshot Owner Tablespace Name Object Name Subobject Name Obj. Type DB Block Changes % of Capture ** MISSING ** USERS ** MISSING: 300590/300590 ** MISSING ** UNDEFINED 207,760 66.18 ** MISSING ** USERS ** MISSING: 300592/300592 ** MISSING ** UNDEFINED 44,800 14.27 SYS SYSTEM AUD$ TABLE 44,224 14.09 SYS SYSAUX WRM$_SNAPSHOT_DETAILS_INDEX INDEX 14,336 4.57 SYS SYSAUX WRH$_SQL_PLAN TABLE 896 0.29 Back to Segment Statistics Back to Top Segments by Row Lock Waits % of Capture shows % of row lock waits for each top segment compared with total row lock waits for all segments captured by the Snapshot Owner Tablespace Name Object Name Subobject Name Obj. Type Row Lock Waits % of Capture SYS SYSAUX WRH$_SEG_STAT_PK WRH$_SEG_ST_4060618396_50929 INDEX PARTITION 2 50.00 SYS SYSAUX WRI$_ADV_MESSAGE_GROUPS_PK INDEX 2 50.00 Back to Segment Statistics Back to Top Segments by ITL Waits No data exists for this section of the report. Back to Segment Statistics Back to Top Segments by Buffer Busy Waits % of Capture shows % of Buffer Busy Waits for each top segment compared with total Buffer Busy Waits for all segments captured by the Snapshot Owner Tablespace Name Object Name Subobject Name Obj. Type Buffer Busy Waits % of Capture SYS SYSTEM AUD$ TABLE 5 100.00 Back to Segment Statistics Back to Top Dictionary Cache Stats \"Pct Misses\" should be very low (< 2% in most cases) \"Final Usage\" is the number of cache entries being used Cache Get Requests Pct Miss Scan Reqs Pct Miss Mod Reqs Final Usage dc_awr_control 67 0.00 0 2 1 dc_constraints 2 0.00 0 2 1 dc_files 46 0.00 0 0 46 dc_global_oids 532 0.00 0 0 39 dc_histogram_data 2,817 0.89 0 0 13,121 dc_histogram_defs 2,177 2.48 0 0 3,985 dc_objects 6,352 0.36 0 17 2,716 dc_profiles 2,805 0.00 0 0 1 dc_rollback_segments 847 0.00 0 0 22 dc_segments 1,358 0.07 0 44 1,245 dc_sequences 10 0.00 0 10 18 dc_table_scns 2 100.00 0 0 0 dc_tablespace_quotas 151 0.00 0 151 2 dc_tablespaces 2,701 0.00 0 0 8 dc_users 130,772 0.00 0 0 177 global database name 8,125 0.00 0 0 1 outstanding_alerts 26 3.85 0 1 4 sch_lj_objs 4 0.00 0 0 45 sch_lj_oids 5 0.00 0 0 60 Back to Top Library Cache Activity \"Pct Misses\" should be very low Namespace Get Requests Pct Miss Pin Requests Pct Miss Reloads Invali- dations ACCOUNT_STATUS 5,466 0.00 0 0 0 BODY 1,515 0.00 2,011 0.00 0 0 CLUSTER 7 0.00 7 0.00 0 0 DBLINK 5,468 0.00 0 0 0 EDITION 2,817 0.00 2,817 0.00 0 0 INDEX 79 0.00 79 11.39 9 0 QUEUE 62 0.00 214 0.00 0 0 RULESET 1 0.00 1 0.00 0 0 SCHEMA 2,858 0.00 0 0 0 SQL AREA 24,402 0.02 68,304 0.52 95 43 SQL AREA BUILD 119 8.40 0 0 0 SQL AREA STATS 118 33.90 118 33.90 0 0 SUBSCRIPTION 26 0.00 26 0.00 0 0 TABLE/PROCEDURE 3,608 0.11 10,355 0.79 21 0 TRIGGER 247 0.00 283 0.00 0 0 Back to Top Memory Statistics Memory Dynamic Components Memory Resize Operations Summary Memory Resize Ops Process Memory Summary SGA Memory Summary SGA breakdown difference Back to Top Memory Dynamic Components Min/Max sizes since instance startup Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred ordered by Component Component Begin Snap Size (Mb) Current Size (Mb) Min Size (Mb) Max Size (Mb) Oper Count Last Op Typ/Mod ASM Buffer Cache 0.00 0.00 0.00 0.00 0 STA/ DEFAULT 16K buffer cache 0.00 0.00 0.00 0.00 0 STA/ DEFAULT 2K buffer cache 0.00 0.00 0.00 0.00 0 STA/ DEFAULT 32K buffer cache 0.00 0.00 0.00 0.00 0 STA/ DEFAULT 4K buffer cache 0.00 0.00 0.00 0.00 0 STA/ DEFAULT 8K buffer cache 0.00 0.00 0.00 0.00 0 STA/ DEFAULT buffer cache 1,232.00 1,232.00 1,152.00 1,568.00 0 GRO/DEF KEEP buffer cache 0.00 0.00 0.00 0.00 0 STA/ PGA Target 752.00 752.00 752.00 752.00 0 STA/ RECYCLE buffer cache 0.00 0.00 0.00 0.00 0 STA/ SGA Target 3,072.00 3,072.00 3,072.00 3,072.00 0 STA/ Shared IO Pool 0.00 0.00 0.00 0.00 0 STA/ java pool 16.00 16.00 16.00 16.00 0 STA/ large pool 16.00 16.00 16.00 16.00 0 STA/ shared pool 1,776.00 1,776.00 1,440.00 1,856.00 0 SHR/DEF streams pool 0.00 0.00 0.00 0.00 0 STA/ Back to Memory Statistics Back to Top Memory Resize Operations Summary No data exists for this section of the report. Back to Memory Statistics Back to Top Memory Resize Ops No data exists for this section of the report. Back to Memory Statistics Back to Top Process Memory Summary B: Begin Snap E: End Snap All rows below contain absolute values (i.e. not diffed over the interval) Max Alloc is Maximum PGA Allocation size at snapshot time Hist Max Alloc is the Historical Max Allocation for still-connected processes ordered by Begin/End snapshot, Alloc (MB) desc Category Alloc (MB) Used (MB) Avg Alloc (MB) Std Dev Alloc (MB) Max Alloc (MB) Hist Max Alloc (MB) Num Proc Num Alloc B Other 256.93 1.58 4.99 62 62 163 163 B SQL 92.50 90.56 0.62 5.31 58 176 150 146 B Freeable 80.69 0.00 5.76 10.10 39 14 14 B PL/SQL 3.49 3.02 0.02 0.15 2 2 163 163 E Other 252.76 1.37 4.54 62 62 184 184 E SQL 90.48 88.79 0.53 4.96 58 176 172 168 E Freeable 71.31 0.00 5.49 10.51 39 13 13 E PL/SQL 1.01 0.62 0.01 0.02 0 0 184 184 Back to Memory Statistics Back to Top SGA Memory Summary SGA regions Begin Size (Bytes) End Size (Bytes) (if different) Database Buffers 1,291,845,632 Fixed Size 2,260,560 Redo Buffers 14,880,768 Variable Size 2,348,810,672 Back to Memory Statistics Back to Top SGA breakdown difference ordered by Pool, Name N/A value for Begin MB or End MB indicates the size of that Pool/Name was insignificant, or zero in that snapshot Pool Name Begin MB End MB % Diff java free memory 16.00 16.00 0.00 large PX msg pool 1.03 1.03 0.00 large free memory 14.97 14.97 0.00 shared KGH: NO ACCESS 78.25 78.25 0.00 shared KGLH0 306.33 306.58 0.08 shared KGLHD 33.41 33.45 0.12 shared SQLA 831.96 831.51 -0.05 shared event statistics per sess 19.02 19.02 0.00 shared free memory 248.29 246.56 -0.70 shared kglsim heap 25.36 25.36 0.00 shared kglsim object batch 42.27 42.27 0.00 buffer_cache 1,232.00 1,232.00 0.00 fixed_sga 2.16 2.16 0.00 log_buffer 14.19 14.19 0.00 Back to Memory Statistics Back to Top Streams Statistics Streams CPU/IO Usage Streams Capture Streams Capture Rate Streams Apply Streams Apply Rate Buffered Queues Buffered Queue Subscribers Rule Set Persistent Queues Persistent Queues Rate Persistent Queue Subscribers Back to Top Streams CPU/IO Usage No data exists for this section of the report. Back to Streams Statistics Back to Top Streams Capture No data exists for this section of the report. Back to Streams Statistics Back to Top Streams Capture Rate No data exists for this section of the report. Back to Streams Statistics Back to Top Streams Apply No data exists for this section of the report. Back to Streams Statistics Back to Top Streams Apply Rate No data exists for this section of the report. Back to Streams Statistics Back to Top Buffered Queues No data exists for this section of the report. Back to Streams Statistics Back to Top Buffered Queue Subscribers No data exists for this section of the report. Back to Streams Statistics Back to Top Rule Set No data exists for this section of the report. Back to Streams Statistics Back to Top Persistent Queues No data exists for this section of the report. Back to Streams Statistics Back to Top Persistent Queues Rate No data exists for this section of the report. Back to Streams Statistics Back to Top Persistent Queue Subscribers No data exists for this section of the report. Back to Streams Statistics Back to Top Resource Limit Stats No data exists for this section of the report. Back to Top Shared Server Statistics Shared Servers Activity Shared Servers Rates Shared Servers Utilization Shared Servers Common Queue Shared Servers Dispatchers Back to Top Shared Servers Activity Values represent averages for all samples Avg Total Connections Avg Active Connections Avg Total Shared Srvrs Avg Active Shared Srvrs Avg Total Dispatchers Avg Active Dispatchers 0 0 0 0 0 0 Back to Shared Server Statistics Back to Top Shared Servers Rates Common Queue Per Sec Disp Queue Per Sec Server Msgs/Sec Server KB/Sec Common Queue Total Disp Queue Total Server Total Msgs Server Total(KB) 0 0 0 0.00 0 0 0 0 Back to Shared Server Statistics Back to Top Shared Servers Utilization No data exists for this section of the report. Back to Shared Server Statistics Back to Top Shared Servers Common Queue No data exists for this section of the report. Back to Shared Server Statistics Back to Top Shared Servers Dispatchers No data exists for this section of the report. Back to Shared Server Statistics Back to Top init.ora Parameters init.ora Parameters init.ora Multi-Valued Parameters Back to Top init.ora Parameters Parameter Name Begin value End value (if different) audit_file_dest E:\\APP\\ADMINISTRATOR\\ADMIN\\SYSTEM\\ADUMP audit_trail DB compatible 11.1.0.0.0 control_files E:\\APP\\ADMINISTRATOR\\ORADATA\\MMS\\CONTROL01.CTL, E:\\APP\\ADMINISTRATOR\\ORADATA\\MMS\\CONTROL02.CTL, E:\\APP\\ADMINISTRATOR\\ORADATA\\MMS\\CONTROL03.CTL db_block_size 8192 db_domain db_name system db_recovery_file_dest E:\\app\\administrator\\flash_recovery_area db_recovery_file_dest_size 2147483648 db_unique_name SYSTEM diagnostic_dest E:\\APP\\ADMINISTRATOR java_jit_enabled TRUE log_archive_dest_1 LOCATION=E:\\app\\administrator\\flash_recovery_area log_archive_format ARC%S_%R.%T open_cursors 600 pga_aggregate_target 786432000 processes 1000 remote_login_passwordfile EXCLUSIVE resource_limit TRUE sessions 1524 sga_max_size 3674210304 sga_target 3221225472 standby_file_management AUTO undo_tablespace UNDOTBS1 Back to init.ora Parameters Back to Top init.ora Multi-Valued Parameters This section only displays parameters that have more one value '(NULL)' indicates a missing parameter value A blank in the End Snapshot indicates the same value as the BeginSnapshot Parameter Name Begin value End value (if different) control_files E:\\APP\\ADMINISTRATOR\\ORADATA\\MMS\\CONTROL01.CTL control_files E:\\APP\\ADMINISTRATOR\\ORADATA\\MMS\\CONTROL02.CTL control_files E:\\APP\\ADMINISTRATOR\\ORADATA\\MMS\\CONTROL03.CTL Back to init.ora Parameters Back to Top Dynamic Remastering Stats No data exists for this section of the report. Back to Top End of Report","title":"Error"},{"location":"support/showmore/","text":"Show More Example Unordered List Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered List Example : 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"Shown More"},{"location":"support/showmore/#show-more","text":"Example Unordered List Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered List Example : 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"Show More"}]}